# -*- org-use-property-inheritance: t; lexical-binding: t -*-
#+title: Emacs configuration
#+author: Vinícius Simões <vinicius.simoes95@gmail.com>
#+startup: overview

* Early init
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "early-init.el" user-emacs-directory)
:END:

Adds the header to avoid warnings, also enables lexical binding.

#+begin_src emacs-lisp
  ;;; early-init.el --- Early init file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src

Increase temporarily the GC limits.

#+begin_src emacs-lisp
  (let ((gc-cp gc-cons-percentage)
        (fha file-name-handler-alist))
    (add-hook 'after-init-hook
              (lambda ()
                (setopt gc-cons-threshold (* 2 1000 1000) ;; 2MB
                        gc-cons-percentage gc-cp
                        file-name-handler-alist fha))))
#+end_src

Do not check bytecode

#+begin_src emacs-lisp
   (setopt load-prefer-newer noninteractive)
#+end_src

Native compilation settings

#+begin_src emacs-lisp
  (when (featurep 'native-compile)
    ;; Silence compiler warnings as they can be pretty disruptive
    (setopt native-comp-async-report-warnings-errors nil
            ;; Make native compilation happens asynchronously
            native-comp-jit-compilation t))

  ;; Disable garbage collection on startup
  (setopt gc-cons-threshold most-positive-fixnum
          gc-cons-percentage 0.8
          file-name-handler-alist nil)
#+end_src

Default frame alist

#+begin_src emacs-lisp
  (dolist (var '(default-frame-alist initial-frame-alist))
    (push '(scroll-bar . 0) var)
    (push '(menu-bar-lines . 0) var)
    (push '(tool-bar-lines . 0) var)
    (push '(vertical-scroll-bars . nil) var)
    (push '(scroll-bar-width  . 12) var))
#+end_src

Remove some unneeded UI elements (the user can turn back on anything they wish)

#+begin_src emacs-lisp
  (setopt frame-resize-pixelwise t
          frame-inhibit-implied-resize t
          use-dialog-box t
          use-file-dialog nil
          inhibit-splash-screen t
          inhibit-startup-screen t
          inhibit-x-resources t
          inhibit-startup-buffer-menu t)

  (menu-bar-mode -1)
  (unless (eq system-type 'android)
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+end_src

Disable =package.el=

#+begin_src emacs-lisp
   (setq package-enable-at-startup nil)
#+end_src

Resizing the Emacs frame can be a terribly expensive part of changing
the p font. By inhibiting this, we easily halve startup times with
fonts that are larger than the system default.

#+begin_src emacs-lisp
  (setopt frame-inhibit-implied-resize t)
#+end_src

Android specific changes

#+begin_src emacs-lisp
  (when (eq system-type 'android)
    (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin"
                           (getenv "PATH")))
    (setenv "LD_LIBRARY_PATH" (format "%s:%s"
                                      "/data/data/com.termux/files/usr/lib"
                                      (getenv "LD_LIBRARY_PATH")))
    (push "/data/data/com.termux/files/usr/bin" exec-path))
#+end_src

End of file

#+begin_src emacs-lisp
  ;;; early-init.el ends here
#+end_src
* Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "init.el" user-emacs-directory)
:END:

Adds the header to avoid warnings, also enables lexical binding.

#+begin_src emacs-lisp
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src

** Startup
Emacs loaddefs

#+begin_src emacs-lisp
  (require 'loaddefs)
#+end_src

** Package manager
[[https://github.com/progfolio/elpaca][Elpaca package manager]] configuration.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

Use package integration

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Base configuration
*** Site lisp directory
Adds site-lisp to the load-path

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "site-lisp"))
#+end_src

Require the loaddefs from site-lisp directory, which has some local
libs with my custom functions

#+begin_src emacs-lisp
  (require 'site-lisp-loaddefs nil t)
#+end_src

*** Private directory
#+begin_src emacs-lisp
  (defconst private-dir (expand-file-name "private" user-emacs-directory))
  (unless (file-exists-p private-dir)
    (make-directory private-dir :parents))
#+end_src

*** Temporary directory
#+begin_src emacs-lisp
  (defconst temp-dir (expand-file-name "cache" user-emacs-directory))
  (unless (file-exists-p temp-dir)
    (make-directory (concat temp-dir) :parents))
#+end_src

*** Custom file
#+begin_src emacs-lisp
  (setopt custom-file (expand-file-name "custom.el" private-dir))

  (add-hook 'elpaca-after-init-hook (lambda ()
                                      (unless (file-exists-p custom-file)
                                        (write-region "" nil custom-file))
                                      (load custom-file 'noerror)))
#+end_src

*** UTF-8 please!
#+begin_src emacs-lisp
  (setopt default-process-coding-system '(utf-8-unix . utf-8-unix)
          locale-coding-system 'utf-8)

  (set-charset-priority 'unicode)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

*** Variables customizations

#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'y-or-n-p
          confirm-nonexistent-file-or-buffer t
          save-interprogram-paste-before-kill t
          mouse-yank-at-point t
          require-final-newline t
          visible-bell nil
          ring-bell-function 'ignore
          ;; http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
          minibuffer-prompt-properties
          '(read-only
            t
            point-entered
            minibuffer-avoid-prompt
            face minibuffer-prompt)
          ;; Disable non selected window highlight
          cursor-in-non-selected-windows nil
          highlight-nonselected-windows nil
          ;; PATH
          exec-path (append
                     exec-path
                     `("/usr/local/bin/"
                       ,(expand-file-name "~/.local/bin")
                       ,(expand-file-name "~/.asdf/shims")))
          inhibit-startup-message t
          fringes-outside-margins t
          select-enable-clipboard t
          ;; Backups enabled, use nil to disable
          history-length 1000
          backup-inhibited nil
          make-backup-files t
          auto-save-default t
          auto-save-list-file-name (concat temp-dir "/autosave")
          create-lockfiles nil
          backup-directory-alist
          `((".*" . ,(concat temp-dir "/backup/")))
          auto-save-file-name-transforms
          `((".*" ,(concat temp-dir "/backup/") t))
          bookmark-save-flag t
          bookmark-default-file (concat temp-dir "/bookmarks")
          read-process-output-max (* 1024 1024)
          indent-tabs-mode nil
          tab-always-indent 'complete
          scroll-conservatively 101
          indicate-empty-lines t
          indicate-buffer-boundaries 'left
          sentence-end-double-space nil
          tab-width 4
          kill-do-not-save-duplicates t
          use-dialog-box t
          global-auto-revert-non-file-buffers t
          ediff-window-setup-function 'ediff-setup-windows-plain
          read-extended-command-predicate #'command-completion-default-include-p)

  (fset 'yes-or-no-p 'y-or-n-p)
  (windmove-default-keybindings)

  ;; Better support for files with long lines
  (setopt bidi-paragraph-direction 'left-to-right)
  (setopt bidi-inhibit-bpa t)
#+end_src

*** MacOS variables customizations
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setopt mac-command-modifier 'meta
            mac-option-modifier 'hyper))
#+end_src
*** Hooks for builtin modes
#+begin_src emacs-lisp
  (defun vs/--line-numbers ()
    "Display line numbers."
    (display-line-numbers-mode 1)
    (hl-line-mode 1))

  (defun vs/--font-lock ()
    "Font lock keywords."
    (font-lock-add-keywords
     nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq-local show-trailing-whitespace t)
              (vs/--line-numbers)
              (vs/--font-lock)))
  (add-hook 'text-mode-hook
            (lambda ()
              (setq-local show-trailing-whitespace t)
              (auto-fill-mode 1)
              (vs/--line-numbers)
              (vs/--font-lock)))
#+end_src

*** Enable some builtin modes
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (show-paren-mode 1)
  (column-number-mode 1)
  (winner-mode 1)
  (global-so-long-mode 1)
  (savehist-mode 1)
  (recentf-mode 1)
#+end_src

*** Disable some builtin modes
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

*** Prevent *scratch* to be killed
#+begin_src emacs-lisp
  (with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))
#+end_src

*** Emacs Server
#+begin_src emacs-lisp
  (require 'server)
  (when (and (fboundp 'server-running-p)
             (not (server-running-p)))
    (server-start))
#+end_src

** Compile mode
#+begin_src emacs-lisp
  (use-package compile
    :ensure nil
    :bind
    (("C-x c" . (lambda ()
                  (interactive)
                  (let ((current-prefix-arg '(4)))
                    (call-interactively 'project-compile)))))
    :custom
    (compilation-scroll-output t)
    :hook
    (compilation-filter . ansi-color-compilation-filter))
#+end_src
** Dired mode
Custom variables

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :custom
    (dired-mouse-drag-files t)
    (mouse-drag-and-drop-region-cross-program t)
    (dired-listing-switches "-alh")
    (delete-by-moving-to-trash t)
    (dired-dwim-target t)
    (dired-guess-shell-alist-user
     '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open" "open")
       ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mpv" "xdg-open" "open")
       (".*" "xdg-open" "open")))
    :hook
    (window-setup .
                  (lambda ()
                    (put 'dired-find-alternate-file 'disabled nil)))
    :bind
    (:map dired-mode-map
          ("e" . dired-create-empty-file)
          ("RET"  . dired-find-alternate-file)))
#+end_src
** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    :init
    (defun vs--eshell-cat-with-syntax-highlighting (filename)
      "Like cat(1) but with sintax highlighting."
      (let ((existing-buffer (get-file-buffer filename))
            (buffer (find-file-noselect filename)))
        (eshell-print
         (with-current-buffer buffer
           (if (fboundp 'font-lock-ensure)
               (font-lock-ensure)
             (with-no-warnings
               (font-lock-fontify-buffer)))
           (let ((contents (buffer-string)))
             (remove-text-properties 0 (length contents) '(read-only nil) contents)
             contents)))
        (unless existing-buffer
          (kill-buffer buffer))
        nil))
    :config
    (advice-add 'eshell/cat :override #'vs--eshell-cat-with-syntax-highlighting)
    :hook ((eshell-mode . (lambda ()
                            (setq-local completion-styles '(basic)
                                        corfu-count 3
                                        completion-at-point-functions
                                        '(pcomplete-completions-at-point cape-file cape-history)))))
    :custom
    (eshell-scroll-to-bottom-on-input t)
    (eshell-highlight-prompt nil)
    (eshell-cd-on-directory t))
#+end_src
*** eshell git prompt
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :after eshell
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+end_src
*** eshell syntax highlight
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after eshell
    :config
    ;; Enable in all Eshell buffers.
    (eshell-syntax-highlighting-global-mode +1))
#+end_src
** Flymake
#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil
    :hook (prog-mode . flymake-mode)
    :bind (:map flymake-mode-map
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! L" . flymake-show-project-diagnostics)
                ("C-c ! l" . flymake-show-buffer-diagnostics)))
#+end_src
** Flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :bind (:map flyspell-mode
                ("C-;" . nil)))
#+end_src
** Org mode
*** Constants
Defining where the Org files will be stored.

#+begin_src emacs-lisp
  (defconst vs/org-directory
    (if (file-directory-p "~/Sync/org/") "~/Sync/org/" "~/org"))
#+end_src

Org agenda directory

#+begin_src emacs-lisp
  (defconst vs/org-agenda-directory
    (list
     (concat vs/org-directory "agenda/")))
#+end_src

Capture templates

#+begin_src emacs-lisp
  (defconst vs/org-capture-templates
    `(("t" "TODO entry" entry (file+headline "agenda/personal.org" "Tasks")
       "* TODO %?\nSCHEDULED: %^t\n%U\n%a\n")
      ("m" "Meetings menu" entry (file+headline "agenda/personal.org" "Meetings")
       "* TODO MEETING with %? :MEETING:\nSCHEDULED: %^t\n%U\n")
      ("r" "Reading list" entry (file+headline "reading_list.org" "Articles/Posts")
       "* TODO %?\n%U\n"
       :refile-targets (("reading_list.org" :maxlevel . 1)))
      ("n" "Note" entry (file org-default-notes-file)
       "* %? \n%t")
      ("c" "New Contact" entry (file "contacts.org")
       "* %(org-contacts-template-name)
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :PHONE:
  :ALIAS:
  :NICKNAME:
  :IGNORE:
  :ICON:
  :NOTE:
  :ADDRESS:
  :COMPLEMENT:
  :BIRTHDAY:
  :END:")))
#+end_src

My Org structure templates.

#+begin_src emacs-lisp
  (defconst vs/org-structure-template-alist
    '(("n" . "notes")
      ("a" . "export ascii")
      ("c" . "center")
      ("C" . "comment")
      ("e" . "example")
      ("E" . "export")
      ("h" . "export html")
      ("l" . "export latex")
      ("q" . "quote")
      ("s" . "src")
      ("sv" . "src verb :wrap src ob-verb-response")
      ("v" . "verse")))
#+end_src

*** Package declaration
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-agenda-custom-commands
     '(("c" "Complete agenda view"
        ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "High-priority unfinished tasks:")))
         (agenda "")
         (alltodo ""
                  ((org-agenda-skip-function
                    '(or (vs/--org-skip-subtree-if-habit)
                         (vs/--org-skip-subtree-if-priority ?A)
                         (org-agenda-skip-if nil '(scheduled deadline))))
                   (org-agenda-overriding-header "ALL normal priority tasks:")))))))
    (org-directory vs/org-directory)
    (org-default-notes-file (concat org-directory "notes.org"))
    (org-agenda-files vs/org-agenda-directory)
    (org-confirm-babel-evaluate nil)
    (org-src-fontify-natively t)
    (org-log-done 'time)
    (org-babel-sh-command "zsh")
    (org-capture-templates vs/org-capture-templates)
    (org-capture-bookmark nil)
    (org-structure-template-alist vs/org-structure-template-alist)
    (org-use-speed-commands t)
    (org-refile-use-outline-path t)
    (org-outline-path-complete-in-steps nil)
    (org-refile-targets '((org-agenda-files :maxlevel . 1)))
    (org-hide-emphasis-markers t)
    (org-imenu-depth 7)
    (org-bookmark-names-plist nil)
    (org-babel-load-languages '((emacs-lisp . t)
                                (python . t)
                                (js . t)
                                (shell . t)
                                (plantuml . t)
                                (sql . t)
                                (ruby . t)
                                (dot . t)
                                (latex . t)))

    :hook
    (org-babel-after-execute . org-display-inline-images)
    (org-mode . toggle-word-wrap)
    (org-mode . org-indent-mode)
    (org-mode . turn-on-visual-line-mode)
    (org-mode . (lambda () (display-line-numbers-mode -1)))
    (org-mode . auto-fill-mode)

    :bind
    (("C-c l" . #'org-store-link)
     ("C-c a" . #'org-agenda)
     ("C-c c" . #'org-capture))

    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages))
#+end_src

*** Org export Latex customization
Abntex2 class

#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure nil
    :after ox-latex
    :custom
    ;; Source code highlight with Minted package.
    (org-latex-listings 'minted)
    (org-latex-packages-alist '(("" "minted")))
    (org-latex-pdf-process
     '("latexmk -shell-escape -pdf -interaction=nonstopmode -file-line-error %f")
     :config
     (add-to-list 'org-latex-classes
                  '("abntex2"
                    "\\documentclass{abntex2}
                      [NO-DEFAULT-PACKAGES]
                      [EXTRA]"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                    ("\\maketitle" . "\\imprimircapa")))))
#+end_src

*** Extensions
**** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom (org-hide-leading-stars t))
#+end_src

**** Org Download
#+begin_src emacs-lisp
  (use-package org-download
    :hook (dired-mode . org-download-enable))
#+end_src

**** Org Present
#+begin_src emacs-lisp
  (use-package org-present
    :unless (eq system-type 'android)
    :hook
    (org-present-mode .
                      (lambda ()
                        (org-present-big)
                        (org-display-inline-images)
                        (org-present-hide-cursor)
                        (org-present-read-only)))
    (org-present-mode-quit .
                           (lambda ()
                             (org-present-small)
                             (org-remove-inline-images)
                             (org-present-show-cursor)
                             (org-present-read-write))))
#+end_src

**** Org + Reveal.js
#+begin_src emacs-lisp
  (use-package org-re-reveal
    :unless (eq system-type 'android)
    :custom
    (org-re-reveal-root
     "https://cdn.jsdelivr.net/reveal.js/latest")
    (org-reveal-mathjax t))
#+end_src

**** Org Verb
Make HTTP requests using org files!

#+begin_src emacs-lisp
  (use-package verb
    :after org
    :config
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
    (add-to-list 'org-babel-load-languages '(verb . t)))
#+end_src

**** Org Babel Async
Turn code evaluation async.

#+begin_src emacs-lisp
  (use-package ob-async
    :after ob)
#+end_src

**** Ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :after ox)
#+end_src

**** Org Notify
#+begin_src emacs-lisp
  (use-package org-notify
    :unless (or (eq system-type 'android) (eq system-type 'darwin))
    :after org
    :config
    (org-notify-start 60)

    (org-notify-add
     'default
     '(:time "10m" :period "2m" :duration 25 :actions -notify/window)
     '(:time "1h" :period "15m" :duration 25 :actions -notify/window)
     '(:time "2h" :period "30m" :duration 25 :actions -notify/window)))
#+end_src

**** Org tempo
#+begin_src emacs-lisp
  (use-package org-tempo
    :after org
    :ensure nil)
#+end_src

**** Grip mode
Render org mode/markdown as Github README on the browser.

Requires Python package =grip=.

#+begin_src emacs-lisp
  (use-package grip-mode
    :defer t)
#+end_src

** Project
#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :bind (:map project-prefix-map
                ("o l" . vs/project-dir-locals)
                ("o d" . vs/project-db-file)
                ("o a" . vs/project-api-file)
                ("o r" . vs/project-runbook)
                ("S" . vs/project-save-project-buffers))
    :custom ((project-compilation-buffer-name-function
              'project-prefixed-buffer-name))
    :config
    (fset 'project-shell 'vs/vterm-in-project))
#+end_src

** Tempo mode
#+begin_src emacs-lisp
  (use-package tempo
    :ensure nil
    :commands (tempo-forward-mark
               tempo-backward-mark
               tempo-complete-tag
               vs/insert-tempo-template)
    :custom ((tempo-interactive t))
    :bind
    (("M-]" . tempo-forward-mark)
     ("M-[" . tempo-backward-mark)
     ("S-<tab>" . tempo-complete-tag)
     ("C-c I" . vs/insert-tempo-template))
    :init
    (defun vs/insert-tempo-template ()
      "Reads a template from a completion list and call it.
  Based on https://www.n16f.net/blog/templating-in-emacs-with-tempo/."
      (interactive)
      (let* ((tags-data
              (mapcar (lambda (entry)
                        (let ((function (cdr entry)))
                          (list function (documentation function))))
                      (tempo-build-collection)))
             (completion-extra-properties
              `(:annotation-function
                (lambda (string)
                  (let* ((data (alist-get string minibuffer-completion-table
                                          nil nil #'string=))
                         (description (car data)))
                    (format "  %s" description)))))
             (function-name (completing-read "Template: " tags-data))
             (function (intern function-name)))
        (funcall function))))
#+end_src

** Third part Extensions
*** ChatGPT Shell
#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :defer t)
#+end_src
*** Diff HL
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    (magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
    (magit-post-refresh-hook . diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode))
#+end_src
*** Dump jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :after xref
    :custom ((dumb-jump-force-searcher 'rg)
             (xref-show-definitions-function #'xref-show-definitions-completing-read))
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
*** Editor config
#+begin_src emacs-lisp
  (use-package editorconfig
    :hook
    (prog-mode . editorconfig-mode))
#+end_src
*** Emacs everywhere
#+begin_src emacs-lisp
  (use-package emacs-everywhere
    :unless (eq system-type 'android)
    :defer t
    :custom
    (emacs-everywhere-frame-parameters  '((name . "emacs-everywhere")
                                          (width . 80)
                                          (height . 12)
                                          (menu-bar-lines . 0)
                                          (tool-bar-lines . 0)
                                          (vertical-scroll-bars . nil))))
#+end_src
*** Envrc
#+begin_src emacs-lisp
  (use-package envrc
    :hook (after-init . envrc-global-mode))
#+end_src
*** Exec Path From Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (or (daemonp) (memq window-system '(mac ns x)))
      (exec-path-from-shell-initialize)))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode))
#+end_src
*** Iedit
#+begin_src emacs-lisp
  (use-package iedit
    :bind ("C-;" . iedit-mode))
#+end_src
*** Impostman
#+begin_src emacs-lisp
  (use-package impostman
    :defer t)
#+end_src
*** Kubel
Kubernetes management from Emacs
https://github.com/abrochard/kubel/tree/master

#+begin_src emacs-lisp
  (use-package kubel
    :bind ("C-c K" . kubel))
#+end_src
*** Magit
Latest seq for transient (with workaround due to a bug on elpaca)

#+begin_src emacs-lisp
  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  ;; You could embed this code directly in the reicpe, I just abstracted it into a function.
  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                         elpaca--pre-built-steps elpaca-build-steps))
            (list '+elpaca-unload-seq 'elpaca--activate-package)))

  (use-package seq :ensure `(seq :build ,(+elpaca-seq-build-steps)))
#+end_src

Latest transient (bug elpaca)

#+begin_src emacs-lisp
  (use-package transient)
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src
*** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("M-n" . mc/mark-next-like-this)
    ("M-p" . mc/mark-previous-like-this)
    ("C-c x" . mc/mark-all-like-this))
#+end_src
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Iosevka Nerd Font"))
#+end_src
*** Password store
#+begin_src emacs-lisp
  (use-package password-store
    :defer t)
#+end_src
*** PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode  ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-loader-install))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents  . 5)
                       (projects . 5)
                       (bookmarks . 5)
                       (agenda . 5)))
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    (dashboard-display-icons-p t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :config
    (dashboard-setup-startup-hook))
#+end_src
*** Reformatter
Provides a macro that helps to standardize the way Emacs use CLI
formatters, dealing with things such as:

- Missing programs
- Buffers not yet saved to a file
- Displaying error output
- Colorising ANSI escape sequences in any error output
- Handling file encodings correctly

  #+begin_src emacs-lisp
    (use-package reformatter)
  #+end_src
*** Ripgrep
#+begin_src emacs-lisp
  (use-package rg
    :bind ("C-c r" . rg-menu)
    :custom (rg-command-line-flags '("--hidden")))
#+end_src
*** Rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src
*** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    :bind
    (:map smartparens-mode-map
          ("C-)" . sp-forward-slurp-sexp)
          ("C-(" . sp-forward-barf-sexp)
          ("C-{" . sp-backward-slurp-sexp)
          ("C-}" . sp-backward-barf-sexp))
    :hook   (prog-mode . smartparens-mode))
#+end_src
*** Switch Window
#+begin_src emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window))
#+end_src
*** View Large Files
#+begin_src emacs-lisp
  (use-package vlf
    :config
    (require 'vlf-setup))
#+end_src
*** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :bind ("<f7>" . vterm-other-window)
    :custom (vterm-max-scrollback 5000))
#+end_src
*** Telega
#+begin_src emacs-lisp
  (use-package telega
    :unless (eq system-type 'android)
    :bind ("C-c t" . telega))
#+end_src
*** Treesit Auto
Tree sitter auto installer for Emacs 29

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
*** Wich Key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
*** XClip
#+begin_src emacs-lisp
  (use-package xclip
    :if (and (eq system-type 'gnu/linux) (string= (getenv "XDG_SESSION_TYPE") "x11"))
    :hook (after-init . xclip-mode))
#+end_src
*** Yequake
Emacsclient popups on desktop

#+begin_src emacs-lisp
  (use-package yequake
    :custom
    (yequake-frames
     '(("org-capture"
        (buffer-fns . (yequake-org-capture))
        (width . 0.75)
        (height . 0.5)
        (alpha . 0.95)
        (frame-parameters . ((undecorated . t)
                             (skip-taskbar . t)
                             (sticky . t)))))))
#+end_src
** Appearence
*** Fonts Families
Uses fontaine to configure the fonts preset

#+begin_src emacs-lisp
  (use-package fontaine
     :custom
    (fontaine-presets
     `((small
        :default-family "Iosevka Nerd Font"
        :default-height ,(if (eq system-type 'darwin) 140 100)
        :variable-pitch-family "Noto Sans")
       (regular) ; like this it uses all the fallback values and is named `regular'
       (medium
        :default-weight semilight
        :default-height ,(if (eq system-type 'darwin) 180 140)
        :bold-weight extrabold)
       (large
        :inherit medium
        :default-height ,(if (eq system-type 'darwin) 220 180))
       (presentation
        :inherit medium
        :default-weight light
        :default-height 180)
       (t
        :default-family "Iosevka Nerd Font"
        :default-weight regular
        :default-height ,(if (eq system-type 'darwin) 160 120)
        :fixed-pitch-family "Iosevka Nerd Font" ; falls back to :default-family
        :fixed-pitch-weight nil ; falls back to :default-weight
        :fixed-pitch-height 1.0
        :fixed-pitch-serif-family "Iosevka Nerd Font" ; falls back to :default-family
        :fixed-pitch-serif-weight nil ; falls back to :default-weight
        :fixed-pitch-serif-height 1.0
        :variable-pitch-family "Noto Sans"
        :variable-pitch-weight nil
        :variable-pitch-height 1.0
        :bold-family nil ; use whatever the underlying face has
        :bold-weight bold
        :italic-family nil
        :italic-slant italic
        :line-spacing nil
        :symbol-family ,(if (eq system-type 'darwin) "Apple Color Emoji" "Noto Color Emoji"))))
    :init
    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    :hook
    (kill-emacs . fontaine-store-latest-preset)
    (modus-themes-after-load-theme . fontaine-apply-current-preset)
    :bind (("C-c f" . fontaine-set-preset)
           :map ctl-x-x-map
           ("v" . variable-pitch-mode)))
#+end_src

Helps in font resize.

#+begin_src emacs-lisp
  (setopt text-scale-remap-header-line t)
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-mixed-fonts t)
    :config
    (defun vs/--setup-theme ()
      "Configure theme."
      (load-theme 'modus-vivendi-tinted t))
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook 'vs/--setup-theme)
      (vs/--setup-theme)))
#+end_src

*** Modeline
See more: https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line

Disabling my custom modeline for now.

#+begin_src emacs-lisp :tangle no
   (use-package vs-modeline-mode
    :ensure nil
    :defer t
    :after nerd-icons
    :init
    (vs-modeline-mode))
#+end_src

Experimenting Mood Line

#+begin_src emacs-lisp
  (use-package mood-line
    :init
    (mood-line-mode 1))
#+end_src

*** Display buffer rules
#+begin_src emacs-lisp
  (setopt display-buffer-alist
          '(("\\(\\*.*vterm\\.*\\*?\\|\\*?e?shell\\*\\)"
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . -1)
             (dedicated . t))
            ((lambda (buffer-name)
               (with-current-buffer buffer-name
                 (derived-mode-p 'compilation-mode 'comint-mode)))
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . 0)
             (dedicated . t))
            ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Help\\)\\*"
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . 1)
             (dedicated . t))))
#+end_src

*** Tab bar mode
#+begin_src emacs-lisp
  (use-package tab-bar-mode
    :ensure nil
    :custom
    (tab-bar-tab-name-function  (lambda ()
                                  (if-let ((project (project-current))
                                           (project-name (project-name project)))
                                      project-name
                                    (tab-bar-tab-name-current))))
    (tab-bar-mode t)
    (tab-bar-new-tab-choice "*scratch*")
    (tab-bar-close-button-show nil)
    (tab-bar-new-button-show nil)
    :bind
    ("H-t" . tab-bar-select-tab-by-name))
#+end_src

** Completion system
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure (vertico
             :files (:defaults "extensions/*")
             :includes (vertico-directory))
    :custom
    (vertico-cycle t)
    (enable-recursive-minibuffers t)
    :init
    (vertico-mode 1)
    :bind
    (:map vertico-map
          ("M-h" . vertico-directory-up))
    :hook
    (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-category-defaults nil))
#+end_src

*** Embark - minibuffer actions
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("M-o" . embark-act)
     ("C-h B" . embark-bindings))
    :custom
    (prefix-help-command 'embark-prefix-help-command)
    (embark-action-indicator
     (lambda (map _target)
       (which-key--show-keymap "Embark" map nil nil 'no-paging)
       'which-key--hide-popup-ignore-command))
    (embark-become-indicator 'embark-action-indicator))
#+end_src

Hide the mode line of the Embark live/completions buffers

#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src

*** Marginalia - minibuffer annotations
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode 1)
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle)
                ("M-A" . marginalia-cycle)))
#+end_src

*** Consult - commands based on completing-read
#+begin_src emacs-lisp
  (use-package consult
    :bind
    (("C-c h" . consult-history)
     ("C-c m" . consult-mode-command)
     ("C-c b" . consult-bookmark)
     ("C-c k" . consult-kmacro)

     ("C-x M-:" . consult-complex-command)
     ("C-x b". consult-buffer)
     ("C-x 4 b". consult-buffer-other-window)
     ("C-x 5 b". consult-buffer-other-frame)
#+end_src

Custom =M-#= bindings for fast register access

#+begin_src emacs-lisp
  ("M-#" . consult-register-load)
  ("M-'" . consult-register-store)
  ("C-M-#" . consult-register)
  ("C-M-#" . consult-register)
#+end_src

Other custom bindings

#+begin_src emacs-lisp
  ("M-y" . consult-yank-pop)
#+end_src

M-g bindings (goto-map)

#+begin_src emacs-lisp
  ("M-g e" . consult-compile-error)
  ("M-g g" . consult-goto-line)
  ("M-g M-g" . consult-goto-line)
  ("M-g o" . consult-outline)
  ("M-g m" . consult-mark)
  ("M-g k" . consult-global-mark)
  ("M-g i" . consult-imenu)
  ("M-g I" . consult-imenu-multi)
  ("M-g !" . consult-flymake)
#+end_src

M-s bindings (search-map)

#+begin_src emacs-lisp
  ("M-s f" . consult-find)
  ("M-s L" . consult-locate)
  ("M-s g" . consult-grep)
  ("M-s G" . consult-git-grep)
  ("M-s r" . consult-ripgrep)
  ("M-s l" . consult-line)
  ("M-s k" . consult-keep-lines)
  ("M-s u" . consult-focus-lines)
#+end_src

Isearch integration

#+begin_src emacs-lisp
  ("M-s e" . consult-isearch-history)
  :map isearch-mode-map
  ("M-e" . consult-isearch-history)
  ("M-s e" . consult-isearch-history)
  ("M-s l" . consult-line))
#+end_src

Consult narrow key

#+begin_src emacs-lisp
  :custom
  (consult-narrow-key "<"))
#+end_src

Consult and emabark

#+begin_src emacs-lisp
  (use-package embark-consult
    :after consult)
#+end_src

Consult dir

#+begin_src emacs-lisp
  (use-package consult-dir
    :bind
    ("C-x C-d" . consult-dir)
    :after consult)
#+end_src

Consult and vertico

#+begin_src emacs-lisp
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setopt completion-in-region-function
          (lambda (&rest args)
            (apply (if (bound-and-true-p vertico-mode)
                       'consult-completion-in-region
                     'completion--in-region)
                   args)))
#+end_src

Consult and Eglot integration

#+begin_src emacs-lisp
  (use-package consult-eglot
    :after (consult eglot))
#+end_src

*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+end_src
*** Cape
Useful completion functions

#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press C-c p ? to for help.
    :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
    ;; Alternatively bind Cape commands individually.
    ;; :bind (("C-c p d" . cape-dabbrev)
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ...)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    ;; (add-hook 'completion-at-point-functions #'cape-history)
    ;; ...
    )
#+end_src
** Global keybindings

New global keybindings

#+begin_src emacs-lisp
  ;; global key
  (keymap-global-set "C-x C-b" 'ibuffer)
  (keymap-global-set "C-c i" 'vs/indent-buffer)
  (keymap-global-set "H-=" 'maximize-window)
  (keymap-global-set "H--" 'minimize-window)
  (keymap-global-set "H-0" 'balance-windows)
  (keymap-global-set "C-x 2" 'vs/split-window-below-and-switch)
  (keymap-global-set "C-x 3" 'vs/split-window-right-and-switch)
  (keymap-global-set "M-S-<up>" 'vs/move-line-up)
  (keymap-global-set "M-S-<down>" 'vs/move-line-down)
  (keymap-global-set "M-D" 'vs/duplicate-current-line)
  (keymap-global-set "H-d" 'vs/duplicate-current-line)
  (keymap-global-set "M-/" 'hippie-expand)
  (keymap-global-set "C-c s b" 'vs/scratch-buffer)
  (keymap-global-set "<f8>" 'window-toggle-side-windows)
  (keymap-global-set "M-u" 'upcase-dwim)
  (keymap-global-set "M-l" 'downcase-dwim)
  (keymap-global-set "M-c" 'capitalize-dwim)
  (keymap-global-set "H-<tab>" 'tab-next)
  (keymap-global-set "H-S-<tab>" 'tab-previous)
  (keymap-global-set "M-W" 'vs/kill-ring-unfilled)
  (keymap-global-set "C-x p K" 'vs/close-project-tab)
  (keymap-global-set "H-g o" 'vs/grep-org-files)
  (keymap-global-set "<f5>" 'project-compile)

  ;; global replacements
  (keymap-substitute global-map 'eval-last-sexp 'pp-eval-last-sexp)
#+end_src

Removing some default keybindings

#+begin_src emacs-lisp
  (keymap-global-unset "C-z" t)
  (keymap-global-unset "C-x C-z" t)
#+end_src

** Keybindings for specific modes
*** NXML mode
#+begin_src emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :bind (:map nxml-mode-map
                ("C-c C-f" . vs/format-xml-buffer)
                ("C-c C-w" . vs/nxml-where)))

#+end_src

** Language server protocol (LSP)
Using Eglot since is the default LSP in Emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :bind
    (:map eglot-mode-map
          ("C-c e a" . eglot-code-actions)
          ("C-c e f" . eglot-format)
          ("C-c e r" . eglot-rename)
          ("C-c e R" . eglot-reconnect)
          ("C-c e o" . eglot-code-action-organize-imports)
          ("C-c e D" . eglot-find-declaration)
          ("C-c e i" . eglot-find-implementation)
          ("C-c e d" . eglot-find-typeDefinition)
          ("C-c e h" . eldoc))
    :custom
    (eglot-autoshutdown t))
#+end_src

** Docker
Packages

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t)

  (use-package docker-compose-mode
    :defer t)

  (use-package docker
    :unless (eq system-type 'android)
    :bind ("C-c d" . docker))
#+end_src

** Programming languages
#+begin_src emacs-lisp
  (use-package prog-mode
    :ensure nil
    :hook ((prog-mode . flyspell-prog-mode)
           (prog-mode-hook . subword-mode)))
#+end_src

*** Clojure
Clojure mode

#+begin_src emacs-lisp
  (use-package clojure-mode
    :defer t)
#+end_src

Cider

#+begin_src emacs-lisp
  (use-package cider
    :after clojure)
#+end_src

Flymake Kondor

#+begin_src emacs-lisp
  (use-package flymake-kondor
    :hook (clojure-mode . flymake-kondor-setup))
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local clojure-lsp-link
      (concat "https://github.com/clojure-lsp/clojure-lsp/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "clojure-lsp-native-macos-amd64.zip")
               (t "clojure-lsp-native-static-linux-amd64.zip"))))

  (defvar-local clojure-lsp-command
      (cond
       ((eq system-type 'darwin)
        '("clojure-lsp-native-macos-amd64/clojure-lsp"))
       (t '("clojure-lsp-native-static-linux-amd64/clojure-lsp"))))

  (vs/add-auto-lsp-server 'clojure-mode
                          :download-url clojure-lsp-link
                          :command clojure-lsp-command)
#+end_src
*** C#
LSP

#+begin_src emacs-lisp
  (defcustom vs/omnisharp-solution-file nil
    "Set the solution file for omnisharp LSP server."
    :group 'csharp
    :type 'string
    :safe t)

  (defvar-local omnisharp-link
      (concat "https://github.com/omnisharp/omnisharp-roslyn/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "omnisharp-osx.tar.gz")
               (t "omnisharp-linux-x64.tar.gz"))))

  (defvar-local omnisharp-command (append
                                   (list "run" "-lsp")
                                   (when vs/omnisharp-solution-file
                                     (list "-s" vs/omnisharp-solution-file))))

  (vs/add-auto-lsp-server
   'csharp-ts-mode
   :download-url omnisharp-link
   :command-fn (lambda (_interactive)
                 (append
                  (vs/--wrap-lsp-context mode "run")
                  (list "-lsp")
                  (when vs/omnisharp-solution-file
                    (list
                     "-s"
                     (expand-file-name vs/omnisharp-solution-file))))))
#+end_src
*** Crystal
Crystal mode

#+begin_src emacs-lisp
  (use-package crystal-mode
    :defer t)
#+end_src

*** Elixir
Elixir TS Mode

#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    :defer t
    :hook (elixir-ts-mode . (lambda () (tempo-use-tag-list 'elixir-tempo-tags)))
    :bind (:map elixir-ts-mode-map
                ("C-c C-c f" . elixir-format-buffer)
                ("C-c C-c M" . vs/elixir-map-string-to-map-atom)
                ("C-c C-c m" . vs/elixir-map-atom-to-map-string)
                ("C-c C-c J" . vs/etf-to-json)
                ("C-c C-c j" . vs/json-to-etf)
                ("C-c C-c D" . vs/elixir-open-dep-docs)
                ("C-c C-c z" . run-elixir-project))
    :config
    ;; reformatter
    (reformatter-define elixir-format
      :program "mix"
      :args '("format" "-"))

    (defun vs/--set-default-directory-to-mix-project-root (original-fun &rest args)
      (if-let* ((mix-project-root (and buffer-file-name
                                       (locate-dominating-file buffer-file-name
                                                               ".formatter.exs"))))
          (let ((default-directory mix-project-root))
            (apply original-fun args))
        (apply original-fun args)))

    (advice-add 'elixir-format-region :around #'vs/--set-default-directory-to-mix-project-root)
    (advice-add 'elixir-format-buffer :around #'vs/--set-default-directory-to-mix-project-root)

    ;; add major mode remap alist
    (add-to-list 'major-mode-remap-alist
                 '(elixir-mode . elixir-ts-mode)))
#+end_src

Ex Unit

#+begin_src emacs-lisp
  (use-package exunit
    :config
    ;; fix broken dark test link
    (custom-set-faces
     '(ansi-color-black ((t (:background "MediumPurple2" :foreground "MediumPurple2")))))
    :hook
    (elixir-ts-mode . exunit-mode)
    (elixir-mode . exunit-mode))
#+end_src

Inf Elixir

#+begin_src emacs-lisp
  (use-package inf-elixir
    :defer t
    :ensure
    (inf-elixir :type git :host github :repo "vinikira/inf-elixir.el" :branch "main")
    :hook (elixir-ts-mode . inf-elixir-minor-mode))
#+end_src

Org Babel Elixir

#+begin_src emacs-lisp
  (use-package ob-elixir
    :ensure
    (ob-elixir :type git :host github :repo "vinikira/ob-elixir" :branch "main")
    :config
    (add-to-list 'org-babel-load-languages '(elixir . t)))
#+end_src

Compile Credo

#+begin_src emacs-lisp
  (use-package compile-credo
    :ensure
    (compile-credo :type git :host github :repo "vinikira/compile-credo" :branch "main")
    :after (:any elixir-mode elixir-ts-mode))
#+end_src

LSP

#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 `((elixir-ts-mode heex-ts-mode elixir-mode) .
                   ("/Users/vinicius.simoes/.emacs.d/cache/lsp/elixir-ts-mode/next-ls/next_ls"
                    "--stdio=true"
                    :initializationOptions (:experimental (:completions (:enable t)))))))
#+end_src

#+RESULTS:

Flymake credo

#+begin_src emacs-lisp
  (use-package flymake-credo
    :hook
    (elixir-ts-mode . flymake-credo-load)
    (elixir-mode . flymake-credo-load)
    :ensure
    (flymake-credo :type git :host github :repo "vinikira/flymake-credo" :branch "main"))
#+end_src

Mix.el

#+begin_src emacs-lisp
  (use-package mix
    :hook
    (elixir-ts-mode . mix-minor-mode)
    (elixir-mode . mix-minor-mode))
#+end_src

**** Snippets
#+begin_src emacs-lisp
  (with-eval-after-load 'elixir-ts-mode
    (defvar elixir-tempo-tags nil
      "Tempo tags for Elixir mode")

    (tempo-define-template "elixir-mode-pipe-inspect"
                           '("|> IO.inspect(label: \"" p "\")")
                           "pi"
                           "Pipe with IO.inspect"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pipe"
                           '("|> " p)
                           "p"
                           "Inserts a pipe"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-type"
                           '("@type t :: %__MODULE__{" n> p n "}" >)
                           "type"
                           "Inserts a type template"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-defdelegate"
                           '("defdelegate " p ", to: " p ", as: " p )
                           "defdelegate"
                           "Inserts a defdelegate template"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-defmodule-filename"
                           '("defmodule "
                             (string-replace
                              "_" ""
                              (string-replace
                               "/" "."
                               (substring
                                (capitalize
                                 (cadr
                                  (split-string
                                   (file-name-directory buffer-file-name) "lib")))
                                1)))
                             (mapconcat 'capitalize (split-string (file-name-base) "_") "")
                             " do"
                             n n
                             "end" >)
                           "defmodule"
                           "Inserts a defmodule with the name gereated from file name."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-defmodule"
                           '("defmodule " p " do" n p n "end" >)
                           "defm"
                           "Inserts a defmodule template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-moduledoc"
                           '("@moduledoc \"\"\"" > n p n "\"\"\"" >)
                           "moddoc"
                           "Inserts a module doc template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-doc"
                           '("@doc \"\"\"" > n p n "\"\"\"" >)
                           "doc"
                           "Inserts a doc template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-describe"
                           '("describe \"" p "\" do" > n > p n "end" >)
                           "describe"
                           "Inserts a describe template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-test"
                           '("test \"" p "\" do" > n > p n "end" >)
                           "test"
                           "Inserts a test template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-test-context"
                           '("test \"" p "\", ctx" p " do" > n > p n "end" >)
                           "testc"
                           "Inserts a test with context template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-for"
                           '("for " p " <- " p " do" > n > p n "end" >)
                           "for"
                           "Inserts a for template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-def"
                           '("def " p "(" p ") do" > n > p n "end" >)
                           "def"
                           "Inserts a function template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-defp"
                           '("defp " p "(" p ") do" > n > p n "end" >)
                           "defp"
                           "Inserts a private function template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-fn"
                           '("fn " p " -> " > p " end")
                           "fn"
                           "Inserts an anonymous function template."
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pipe-debug"
                           '("|> dbg()")
                           "pd"
                           "Pipe with dbg()"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pipe-debug-this"
                           '("|> tap(&dbg(&1))")
                           "pdt"
                           "Pipe with dbg() only for the current pipeline function"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pipe-io-puts"
                           '("IO.puts(\"" p "\")")
                           "iop"
                           "IO puts"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pipe-io-inspect"
                           '("IO.inspect(" (p "Variable: " variable) ", label: \"" (s variable) "\")")
                           "ioi"
                           "IO inspect"
                           'elixir-tempo-tags)

    (tempo-define-template "elixir-mode-pry"
                           '("require IEx; IEx.pry();")
                           "pry"
                           "IEx pry"
                           'elixir-tempo-tags))
#+end_src
*** Elm
Elm mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :defer t)
#+end_src
*** Erlang
Erlang Mode

#+begin_src emacs-lisp
  (defun vs/load-erlang-mode ()
    "Detect if erlang is installed and load elisp files from erlang directory."
    (interactive)
    (let* ((erlang-lib-dir
            (concat
             (string-trim (shell-command-to-string "asdf where erlang"))
             "/lib"))
           (tools-dir
            (seq-find (lambda (dir-name)
                        (string-match "^tools.?+" dir-name))
                      (directory-files erlang-lib-dir)))
           (erlang-emacs-dir (concat erlang-lib-dir "/" tools-dir "/emacs")))
      (if (file-directory-p erlang-emacs-dir)
          (progn
            (add-to-list 'load-path erlang-emacs-dir)
            (require 'erlang)
            (message "Erlang mode loaded!"))
        (warn "Erlang isn't installed..."))))
#+end_src

*** Dart
Dart mode

#+begin_src emacs-lisp
  (use-package dart-mode
    :defer t
    :custom (dart-format-on-save t)
    :config
    (vs/add-auto-lsp-server
     'dart-mode
     :command-fn (lambda () (list "dart" "language-server"))))
#+end_src
*** Go
Go TS mode

#+begin_src emacs-lisp
  (use-package go-ts-mode
    :ensure nil
    :defer t
    :config
    (add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode)))
#+end_src

*** Groovy
Groovy mode

#+begin_src emacs-lisp
  (use-package groovy-mode
    :defer t)
#+end_src
*** Haskell
Haskell Mode

#+begin_src emacs-lisp
  (use-package haskell-mode
    :custom (haskell-font-lock-symbols t)
    :hook
    (haskell-mode . haskell-indentation-mode)
    (haskell-mode . interactive-haskell-mode))
#+end_src

*** Java
Configures Java Mode

#+begin_src emacs-lisp
  (use-package java-ts-mode
    :ensure nil
    :defer t
    :hook (java-ts-mode . (lambda ()
                            (require 'cc-mode)
                            (c-set-style "cc-mode")
                            (make-local-variable 'tab-width)
                            (make-local-variable 'indent-tabs-mode)
                            (make-local-variable 'c-basic-offset)
                            (setopt tab-width 4
                                    indent-tabs-mode t
                                    c-basic-offset 4))))
#+end_src
*** JavaScript
JS TS Mode

#+begin_src emacs-lisp
  (use-package js-ts-mode
    :ensure nil
    :hook ((js-ts-mode . js-jsx-enable)
           (js-ts-mode . (lambda () (tempo-use-tag-list 'javascript-tempo-tags))))
    :custom
    (js-indent-level 2)
    :config
    ;; remap major mode
    (add-to-list 'major-mode-remap-alist
                 '(js-mode . js-ts-mode))
    (with-eval-after-load 'js
      (define-key js-base-mode-map (kbd "M-.") nil)))
#+end_src

TypeScript TS mode

#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :ensure nil
    :hook ((typescript-ts-mode . js-jsx-enable)
           (typescript-ts-mode . (lambda () (tempo-use-tag-list 'javascript-tempo-tags))))
    :config
    ;; remap major mode
    (add-to-list 'major-mode-remap-alist
                 '(typescript-mode . typescript-ts-mode)))
#+end_src

Jest

#+begin_src emacs-lisp
  (use-package jest-test-mode
    :hook
    ((js-ts-modejs-mode js-jsx-mode typescript-mode typescript-tsx-mode typescript-ts-mode)
     . jest-test-mode))
#+end_src

ESLint compilation mode

#+begin_src emacs-lisp :tangle no
  (use-package compile-eslint
    :ensure (compile-eslint :type git :host github :repo "Fuco1/compile-eslint" :branch "master")
    :after (:any js-mode js-ts-mode)
    :config
    (require 'compile-eslint)
    (when (boundp 'compilation-error-regexp-alist)
      (push 'eslint compilation-error-regexp-alist)))
#+end_src

Flymake ESLint

#+begin_src emacs-lisp
  (use-package flymake-eslint
    :hook ((js-mode js-ts-mode) . flymake-eslint-enable))
#+end_src

LSP

#+begin_src emacs-lisp
  (cl-loop for mode in '(typescript-mode js-mode js-ts-mode typescript-ts-mode)
           do
           (vs/add-auto-lsp-server
            mode
            :download-fn (lambda (_reinstall)
                           (async-shell-command
                            "npm install -g typescript-language-server typescript"
                            (get-buffer-create "*Install js/ts LSP*")))))
#+end_src
**** Snippets
#+begin_src emacs-lisp
  (with-eval-after-load 'js
    (defvar javascript-tempo-tags nil
      "Tempo tags for JS/TS mode.")

    (tempo-define-template "js-mode-named-function"
                           '("function " p "(" p ") {" n> r> n> "}" >)
                           "f"
                           "Inserts a define template for function"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-arrow-function"
                           '("(" p ") => {" n> r> n> "}" >)
                           "af"
                           "Inserts a define template for arrow function"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-console-log"
                           '("console.log(" r ")")
                           "clg"
                           "Inserts a define template for console log"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-define-require-js"
                           '("/**" > n
                             "* " > p n
                             "* @author " > p n
                             "* @since " > p n
                             " */" > n
                             "define(['" p "']," > n
                             "function (" p ") {" > n
                             > p n
                             "     return {" > n
                             "       myModule: null" > n
                             "     }" > n
                             "})" >
                             )
                           "define"
                           "Inserts a define template for RequireJS"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-require-require-js"
                           '("require(['" p "']," > n
                             "function (" p ") {" > n
                             > p n
                             "})" >
                             )
                           "requirejs"
                           "Inserts a require template for RequireJS"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-import"
                           '("import " p " from '" p "'")
                           "import"
                           "Inserts a import template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-log-audit"
                           '("log.audit({title: '" p "', details: '" p "'})")
                           "log.audit"
                           "Inserts a log audit template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-module-exports"
                           '("module.exports = " p)
                           "mde"
                           "Inserts a module export template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssclient"
                           '("/**
  ,* @NApiVersion 2.x
  ,* @NScriptType ClientScript
  ,*/
  define([" p "],
    function (" p ") {
  "> p "
      return {
        pageInit: null,
        fieldChanged: null,
        postSourcing: null,
        sublistChanged: null,
        lineInit: null,
        validateField: null,
        validateLine: null,
        validateInsert: null,
        validateDelete: null,
        saveRecord: null
      }
    })")
                           "ssclient"
                           "Inserts a module suite script client template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssmapreduce"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType MapReduceScript
   ,*/
  define([" p "],
    function (" p ") {
  "> p "
      return {
        getInputData: null,
        map: null,
        reduce: null,
        summarize: null
      }
    })")
                           "ssmapreduce"
                           "Inserts a module suite script map reduce template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssmassupdate"
                           '("/**
   ,*@NApiVersion 2.0
   ,*@NScriptType MassUpdateScript
   ,*/
  define([" p "],
    function (" p ") {
      function each(params) {
  " p >"
      }

      return {
        each: each
      }
    })")
                           "ssmassupdate"
                           "Inserts a module suite script mass update template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssportlet"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType Portlet
   ,*/
  define([" p "],
    function(" p ") {
      function render(params) {
  " p > "
      }

      return {
        render: render
      }
    })")
                           "ssportlet"
                           "Inserts a module suite script portlet template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssrestlet"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType Restlet
   ,*/
  define([" p "],
    function(" p ") {
  " p > "

      return {
        get: null,
        delete: null,
        post: null,
        put: null
      }
    })")
                           "ssrestlet"
                           "Inserts a module suite script restlet template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssschedule"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType ScheduledScript
   ,*/
  define([" p "],
    function(" p ") {
        function execute(context) {
  " p > "
        }

        return {
          execute: execute
        }
  })")
                           "ssschedule"
                           "Inserts a module suite script schedule template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-sssuitelet"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType Suitelet
   ,*/
  define([" p "],
    function(" p ") {
      function onRequest(context) {
        const router = {
          'GET': get,
          'POST': post,
          'PUT': put,
          'DELETE': delete
        }

        const handler = router[context.request.method] || notFound

        return handler(context)
      }

      function get(context) {
      }

      function post(context) {
      }

      function put(context) {
      }

      function delete(context) {
      }

      function notFound(context) {
      }

      return {
        onRequest: onRequest
      }
    })")
                           "sssuitelet"
                           "Inserts a module suite script suitlet template"
                           'javascript-tempo-tags)

    (tempo-define-template "js-mode-ssuserevent"
                           '("/**
   ,*@NApiVersion 2.x
   ,*@NScriptType UserEventScript
   ,*/
  define([" p "],
    function(" p ") {
  " p > "
      return {
        beforeLoad: null,
        beforeSubmit: null,
        afterSubmit: null
      }
    })")
                           "ssuserevent"
                           "Inserts a module suite script user event template"
                           'javascript-tempo-tags))
#+end_src
*** Kotlin
Kotlin Mode

#+begin_src emacs-lisp
  (use-package kotlin-mode
    :defer t)
#+end_src
*** Lisp
Slime

#+begin_src emacs-lisp :tangle no
  (use-package slime
    :mode ("\\.cl$|\\.lisp$" . slime-mode)
    :custom
    (inferior-lisp-program "sbcl")
    (slime1-contribs '(slime-fancy))
    (slime-net-coding-system 'utf-8-unix))
#+end_src
*** Python
Customize python mode

Python TS mode

#+begin_src emacs-lisp
  (use-package python-ts-mode
    :defer t
    :ensure nil
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt"))
#+end_src

*** Ruby
#+begin_src emacs-lisp
  (use-package ruby-ts-mode
    :ensure nil
    :bind (:map ruby-ts-mode-map
                ("C-c C-c f" . ruby-format-buffer)
                ("C-c C-c z" . run-ruby))
    :config
    (reformatter-define ruby-format
      :program "rubocop"
      :args '("-x" "--stderr" "-s" "--"))
    (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode)))
#+end_src

Flymake Ruby

#+begin_src emacs-lisp :tangle no
  (use-package flymake-ruby
    :hook ((ruby-ts-mode ruby-mode) . flymake-ruby-load))
#+end_src

RSpec mode

#+begin_src emacs-lisp
  (use-package rspec-mode
    :defer t)
#+end_src

Inf-ruby

#+begin_src emacs-lisp
  (use-package inf-ruby
    :hook
    (ruby-modek . inf-ruby-minor-mode)
    (ruby-mode . inf-ruby-switch-setup))
#+end_src

LSP

#+begin_src emacs-lisp
  (vs/add-auto-lsp-server
   'ruby-ts-mode
   :download-fn (lambda (_reinstall)
                  (async-shell-command
                   "gem install solargraph"
                   (get-buffer-create "*Install Ruby LSP*"))))
#+end_src
*** Rust
Rustic

#+begin_src emacs-lisp
  (use-package rustic
    :defer t
    :custom (rustic-lsp-client 'eglot))
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local rust-analyzer-link
      (concat "https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "rust-analyzer-x86_64-apple-darwin.gz")
               (t "rust-analyzer-x86_64-unknown-linux-musl.gz"))))

  (defvar-local rust-analyzer-command
      (list (cond
             ((eq system-type 'darwin)
              "rust-analyzer-x86_64-apple-darwin")
             (t "rust-analyzer-x86_64-unknown-linux-musl"))))

  (vs/add-auto-lsp-server 'rustic-mode
                          :download-url rust-analyzer-link
                          :command rust-analyzer-command)
#+end_src
*** Web
Web Mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    ("\\.html?\\'" . web-mode)
    ("\\.njk?\\'" . web-mode)
    ("\\.phtml?\\'" . web-mode)
    ("\\.tpl\\.php\\'" . web-mode)
    ("\\.[agj]sp\\'" . web-mode)
    ("\\.as[cp]x\\'" . web-mode)
    ("\\.erb\\'" . web-mode)
    ("\\.mustache\\'" . web-mode)
    ("\\.djhtml\\'" . web-mode)
    ("\\.mjml\\'" . web-mode)
    ("\\.eex\\'" . web-mode)
    ("\\.leex\\'" . web-mode)
    ("\\.heex\\'" . web-mode)
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (css-indent-offset 2)
    (web-mode-enable-current-element-highlight t)
    :bind (:map web-mode-map
                ("C-c o b" . browse-url-of-file)))

#+end_src

Emmet Mode

#+begin_src emacs-lisp
  (use-package emmet-mode
    :custom
    (emmet-move-cursor-between-quotes t)
    :hook
    ((web-mode vue-mode js-mode js-ts-mode heex-ts-mode elixir-ts-mode)
     . emmet-mode))
#+end_src

Vue Mode
#+begin_src emacs-lisp
  (use-package vue-mode
    :defer t)
#+end_src
*** SQL
SQL Format

#+begin_src emacs-lisp
  (use-package sqlformat
    :custom
    (sqlformat-command 'pgformatter)
    (sqlformat-args '("-s2" "-g"))
    :bind (:map sql-mode-map
                ("C-c C-f" . sqlformat)))
#+end_src

*** Zig
Zig mode

#+begin_src emacs-lisp
  (use-package zig-mode
    :defer t)
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local zls-link
    (concat "https://github.com/zigtools/zls/releases/latest/download/"
            (cond
             ((eq system-type 'darwin) "x86_64-macos.tar.xz")
             (t "x86_64-linux.tar.xz"))))

  (defvar-local zls-command
    (list (cond
           ((eq system-type 'darwin)
            "bin/zls")
           (t "bin/zls"))))

  (vs/add-auto-lsp-server 'zig-mode :download-url zls-link :command zls-command)
#+end_src

** Files formats
*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

*** CVS
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t
    :hook (csv-mode . csv-align-mode))
#+end_src

*** GraphQL
#+begin_src emacs-lisp
  (use-package graphql-mode
    :defer t)
#+end_src

*** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :defer t
    :custom
    (graphviz-dot-indent-width 4))
#+end_src

*** HashiCorp Configuration Language
#+begin_src emacs-lisp
  (use-package hcl-mode
    :defer t)
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md$" . gfm-mode)
    :custom (markdown-command "pandoc --quiet -f gfm -s")
    :bind (:map markdown-mode-map
                ("C-c C-f" . markdownfmt-format-buffer)))

  (use-package markdownfmt
    :hook
    ((gfm-mode markdown-mode) 'markdownfmt-enable-on-save))
#+end_src

*** Mermaid Mode
#+begin_src emacs-lisp
  (use-package mermaid-mode
    :defer t)
#+end_src

*** Nginx
#+begin_src emacs-lisp
  (use-package nginx-mode
    :defer t)
#+end_src

*** Plantuml Mode
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :defer t
    :hook (plantuml-mode . (lambda ()
                             (tempo-use-tag-list 'plantuml-tempo-tags)))
    :custom
    (plantuml-output-type "svg")
    (plantuml-default-exec-mode 'jar)
    :config
    (let* ((plantuml-directory (if (boundp 'private-dir) private-dir "/tmp"))
           (plantuml-target (concat plantuml-directory "/plantuml.jar")))
      (setopt org-plantuml-jar-path plantuml-target
              plantuml-jar-path plantuml-target)))
#+end_src

**** Snippets
#+begin_src emacs-lisp
  (with-eval-after-load 'plantuml-mode
    (defvar plantuml-tempo-tags nil
      "Tempo tags for Plantuml mode")

    (tempo-define-template "plantuml-mode-c4dynamic"
                           '("@startuml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

  /'
  ' macros: Person, Person_Ext, System, System_Ext, SystemDb, SystemDb_Ext,
  ' Boundary, System_Boundary, Enterprise_Boundary, Container, ContainerDb,
  ' Container_Boundary, Component, ComponentDb, RelIndex, increment, setIndex
  '/

  Person(personAlias, \"Label\", \"Optional\")
  Container(containerAlias, \"Label\", \"Tecnology\", \"Optional description\")
  System(systemAlias, \"Label\", \"Optional description\")

  Rel(personAlias, containerAlias, \"Label\", \"Optional Tecnology\")
  @enduml
  ")
                           "c4dynamic"
                           "Inserts a c4 dynamic diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-c4component"
                           '("@startuml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

  /'
  ' macros: Person, Person_Ext, System, System_Ext, SystemDb, SystemDb_Ext,
  ' Boundary, System_Boundary, Enterprise_Boundary, Container, ContainerDb,
  ' Container_Boundary, Component, ComponentDb
  '/

  Person(personAlias, \"Label\", \"Optional\")
  Container(containerAlias, \"Label\", \"Tecnology\", \"Optional description\")
  System(systemAlias, \"Label\", \"Optional description\")

  Rel(personAlias, containerAlias, \"Label\", \"Optional Tecnology\")
  @enduml
  ")
                           "c4component"
                           "Inserts a c4 component diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-c4container"
                           '("@startuml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

  /'
  ' macros: Person, Person_Ext, System, System_Ext, SystemDb, SystemDb_Ext,
  ' Boundary, System_Boundary, Enterprise_Boundary, Container, ContainerDb,
  ' Container_Boundary
  '/

  !define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
  !define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
  !include DEVICONS/angular.puml
  !include DEVICONS/java.puml
  !include DEVICONS/msql_server.puml
  !include FONTAWESOME/users.puml

  LAYOUT_WITH_LEGEND()

  Person(user, \"Customer\", \"People that need products\", \"users\")
  Container(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with\", \"angular\")
  Container(api, \"API\", \"java\", \"Handles all business logic\", \"java\")
  ContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\", \"msql_server\")

  Rel(user, spa, \"Uses\", \"https\")
  Rel(spa, api, \"Uses\", \"https\")
  Rel_R(api, db, \"Reads/Writes\")
  @enduml
  ")
                           "c4container"
                           "Inserts a c4 container diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-c4context"
                           '("@startuml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

  /'
  ' macros: Person, Person_Ext, System, System_Ext, SystemDb, SystemDb_Ext,
  ' Boundary, System_Boundary, Enterprise_Boundary
  '/

  Person(admin, \"Administrator\")

  System(web_app, \"WebApp\")

  System(twitter, \"Twitter\")

  Rel(admin, web_app, \"Uses\", \"HTTPS\")
  Rel(web_app, twitter, \"Gets tweets from\", \"HTTPS\")
  @enduml")
                           "c4context"
                           "Inserts a c4 context diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-c4deployment"
                           '("@startuml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

  /'
  ' macros: Person, Person_Ext, System, System_Ext, SystemDb, SystemDb_Ext,
  ' Boundary, System_Boundary, Enterprise_Boundary, Container, ContainerDb,
  ' Container_Boundary, Component, ComponentDb, RelIndex, increment, setIndex
  ' Deployment_Node
  '/

  Person(personAlias, \"Label\", \"Optional\")
  Container(containerAlias, \"Label\", \"Tecnology\", \"Optional description\")
  System(systemAlias, \"Label\", \"Optional description\")

  Rel(personAlias, containerAlias, \"Label\", \"Optional Tecnology\")
  @enduml
  ")
                           "c4deployment"
                           "Inserts a c4 deployment diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-er"
                           '("@startuml
  ' hide the spot
  hide circle

  ' avoid problems with angled crows feet
  skinparam linetype ortho

  entity \"Entity01\" as e01 {
    ,*e1_id : number <<generated>>
    --
    ,*name : text
    description : text
  }

  entity \"Entity02\" as e02 {
    ,*e2_id : number <<generated>>
    --
    ,*e1_id : number <<FK>>
    other_details : text
  }

  entity \"Entity03\" as e03 {
    ,*e3_id : number <<generated>>
    --
    e1_id : number <<FK>>
    other_details : text
  }

  e01 ||..o{ e02
  e01 |o..o{ e03

  @enduml")
                           "er"
                           "Inserts a ER diagram template."
                           'plantuml-tempo-tags)

    (tempo-define-template
     "plantuml-mode-er-entity"
     '("entity \"" p "\" as " p " {
    ,*" p " : number <<generated>>
    --
    " p " : number <<FK>>
    " p " : text
  }")
     "ent"
     "Inserts a ER entity template."
     'plantuml-tempo-tags)

    (tempo-define-template "plantuml-mode-monochrome"
                           '("skinparam monochrome true
  skinparam backgroundColor #EEEBDC
  skinparam defaultFontName Iosevka Nerd Font
  skinparam ranksep 20
  skinparam dpi 150
  skinparam arrowThickness 0.7
  skinparam packageTitleAlignment left
  skinparam usecaseBorderThickness 0.4
  skinparam defaultFontSize 12
  skinparam rectangleBorderThickness 1
  ")
                           "monochrome"
                           "Inserts monochrome setup."
                           'plantuml-tempo-tags)


    (tempo-define-template
     "plantuml-mode-note"
     '("note " p " of " p n p n "end note")
     "n"
     "Inserts note template."
     'plantuml-tempo-tags))
#+end_src
*** Protobuf mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :defer t)
#+end_src

*** TOML Mode
#+begin_src emacs-lisp
  (use-package toml-mode
    :defer t)
#+end_src

** Writer
*** LaTeX
#+begin_src emacs-lisp :tangle no
  (use-package auctex
    :defer t
    :hook (tex-mode . flyspell-mode))

  (use-package auctex-latexmk
    :defer auctex
    :custom (auctex-latexmk-inherit-TeX-PDF-mode t)
    :hook (auctex-mode-hook . auctex-latexmk-setup))
#+end_src

*** Epub mode
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub$" . nov-mode))
#+end_src

*** Dark Room mode
#+begin_src emacs-lisp
  (use-package darkroom
    :bind ("<f6>" . darkroom-tentative-mode))
#+end_src

*** Langtool

#+begin_src emacs-lisp
  (use-package langtool
    :custom
    (langtool-default-language "en-US")
    (langtool-mother-tongue "pt-BR")
    :bind
    ("C-x w c" . langtool-check)
    ("C-x w d" . langtool-check-done)
    ("C-x w l" . langtool-switch-default-language)
    ("C-x w s" . langtool-show-message-at-point)
    ("C-x w b" . langtool-correct-buffer)
    :config
    (let* ((langtool-directory (if (boundp 'private-dir) private-dir "/tmp"))
           (langtool-link
            "https://languagetool.org/download/LanguageTool-stable.zip")
           (langtool-zip (concat langtool-directory "/langtool.zip"))
           (langtool-folder (concat langtool-directory "/langtool/")))
      (if (not (file-exists-p langtool-folder))
          (progn (message "Downloading langtool.zip")
                 (async-shell-command
                  (format "wget %s -O %s && unzip %s -d %s && rm %s"
                          langtool-link
                          langtool-zip
                          langtool-zip
                          langtool-folder
                          langtool-zip))))
      (autoload 'find-lisp-find-files "find-lisp.el")
      (setopt langtool-language-tool-jar
              (car (find-lisp-find-files
                    langtool-folder "languagetool-commandline.jar")))))
#+end_src

** Mail
*** Notmuch mail client
#+begin_src emacs-lisp
  (use-package notmuch
    :unless (eq system-type 'android)
    :ensure nil
    :commands (notmuch)
    :custom
    'notmuch-saved-searches
    '((:name "Unread"
             :query "tag:inbox and tag:unread"
             :count-query "tag:inbox and tag:unread"
             :key "u"
             :sort-order newest-first)
      (:name "Inbox"
             :query "tag:inbox"
             :count-query "tag:inbox"
             :key "i"
             :sort-order newest-first)
      (:name "Archive"
             :query "tag:archive"
             :count-query "tag:archive"
             :key "a"
             :sort-order newest-first)
      (:name "Sent"
             :query "tag:sent or tag:replied"
             :count-query "tag:sent or tag:replied"
             :key "s"
             :sort-order newest-first)
      (:name "Trash"
             :query "tag:deleted"
             :count-query "tag:deleted"
             :key "t"
             :sort-order newest-first)))
#+end_src

*** SMTP
Remember to set the `user-full-name' and `user-mail-address' in custom
file.

#+begin_src emacs-lisp
  (setopt mail-user-agent 'message-user-agent
          mail-specify-envelope-from t
          sendmail-program "msmtp"
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-sendmail-envelope-from 'header
          message-send-mail-function 'message-send-mail-with-sendmail
          message-kill-buffer-on-exit t)
#+end_src

** End of file
End of file

#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src
