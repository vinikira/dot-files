# -*- org-use-property-inheritance: t; lexical-binding: t -*-
#+title: Emacs configuration
#+author: Vinícius Simões <vinicius.simoes95@gmail.com>
#+startup: overview

* Early init
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "early-init.el" user-emacs-directory)
:END:

Adds the header to avoid warnings, also enables lexical binding.

#+begin_src emacs-lisp
  ;;; early-init.el --- Early init file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src

Increase temporarily the GC limits.

#+begin_src emacs-lisp
  (let ((gc-cp gc-cons-percentage)
        (fha file-name-handler-alist))
    (add-hook 'after-init-hook
              (lambda ()
                (setopt gc-cons-threshold (* 2 1000 1000) ;; 2MB
                        gc-cons-percentage gc-cp
                        file-name-handler-alist fha))))
#+end_src

Do not check bytecode

#+begin_src emacs-lisp
   (setopt load-prefer-newer noninteractive)
#+end_src

Native compilation settings

#+begin_src emacs-lisp
  (when (featurep 'native-compile)
    ;; Silence compiler warnings as they can be pretty disruptive
    (setopt native-comp-async-report-warnings-errors nil
            ;; Make native compilation happens asynchronously
            native-comp-jit-compilation t))

  ;; Disable garbage collection on startup
  (setopt gc-cons-threshold most-positive-fixnum
          gc-cons-percentage 0.8
          file-name-handler-alist nil)
#+end_src

Default frame alist

#+begin_src emacs-lisp
  (dolist (var '(default-frame-alist initial-frame-alist))
    (push '(scroll-bar . 0) var)
    (push '(menu-bar-lines . 0) var)
    (push '(tool-bar-lines . 0) var)
    (push '(vertical-scroll-bars . nil) var)
    (push '(scroll-bar-width  . 12) var))
#+end_src

Remove some unneeded UI elements (the user can turn back on anything they wish)

#+begin_src emacs-lisp
  (setopt frame-resize-pixelwise t
          frame-inhibit-implied-resize t
          use-dialog-box t
          use-file-dialog nil
          inhibit-splash-screen t
          inhibit-startup-screen t
          inhibit-x-resources t
          inhibit-startup-buffer-menu t)

  (menu-bar-mode -1)
  (unless (eq system-type 'android)
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+end_src

Disable =package.el=

#+begin_src emacs-lisp
   (setq package-enable-at-startup nil)
#+end_src

Resizing the Emacs frame can be a terribly expensive part of changing
the p font. By inhibiting this, we easily halve startup times with
fonts that are larger than the system default.

#+begin_src emacs-lisp
  (setopt frame-inhibit-implied-resize t)
#+end_src

Android specific changes

#+begin_src emacs-lisp
  (when (eq system-type 'android)
    (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin"
                           (getenv "PATH")))
    (setenv "LD_LIBRARY_PATH" (format "%s:%s"
                                      "/data/data/com.termux/files/usr/lib"
                                      (getenv "LD_LIBRARY_PATH")))
    (push "/data/data/com.termux/files/usr/bin" exec-path))
#+end_src

End of file

#+begin_src emacs-lisp
  ;;; early-init.el ends here
#+end_src
* Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "init.el" user-emacs-directory)
:END:

Adds the header to avoid warnings, also enables lexical binding.

#+begin_src emacs-lisp
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
#+end_src

** Startup
Profile emacs startup

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (emacs-init-time)
                       gcs-done)))
#+end_src

Emacs loaddefs

#+begin_src emacs-lisp
  (require 'loaddefs)
#+end_src

** Package manager
[[https://github.com/progfolio/elpaca][Elpaca package manager]] configuration.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

Use package integration

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Base configuration
*** Global Constants
Determine if is running on MacOS.

#+begin_src emacs-lisp
  (defconst VS/IS-MACOS (eq system-type 'darwin))
#+end_src

Determine if is running on Android.

#+begin_src emacs-lisp
  (defconst VS/IS-ANDROID (eq system-type 'android))
#+end_src

*** Site lisp directory
Adds site-lisp to the load-path

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "site-lisp"))
#+end_src

Require the loaddefs from site-lisp directory, which has some local
libs with my custom functions

#+begin_src emacs-lisp
  (require 'site-lisp-loaddefs nil t)
#+end_src

*** Macros
When IDLE for call code after emacs-init.

#+begin_src emacs-lisp
  (defmacro when-idle (&rest body)
    `(run-with-idle-timer 0.5 nil (lambda () ,@body)))
#+end_src

*** Private directory
#+begin_src emacs-lisp
  (defconst private-dir (expand-file-name "private" user-emacs-directory))
  (unless (file-exists-p private-dir)
    (make-directory private-dir :parents))
#+end_src

*** Temporary directory
#+begin_src emacs-lisp
  (defconst temp-dir (expand-file-name "cache" user-emacs-directory))

  (unless (file-exists-p temp-dir)
    (make-directory (concat temp-dir) :parents))
#+end_src

*** Custom file
#+begin_src emacs-lisp
  (setopt custom-file (expand-file-name "custom.el" private-dir))

  (add-hook 'elpaca-after-init-hook (lambda ()
                                      (unless (file-exists-p custom-file)
                                        (write-region "" nil custom-file))
                                      (load custom-file 'noerror)))
#+end_src

*** UTF-8 please!
#+begin_src emacs-lisp
  (setopt default-process-coding-system '(utf-8-unix . utf-8-unix)
          locale-coding-system 'utf-8)

  (set-charset-priority 'unicode)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

*** Variables customizations

#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'y-or-n-p
          confirm-nonexistent-file-or-buffer t
          save-interprogram-paste-before-kill t
          mouse-yank-at-point t
          require-final-newline t
          visible-bell nil
          ring-bell-function 'ignore
          ;; http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
          minibuffer-prompt-properties
          '(read-only
            t
            point-entered
            minibuffer-avoid-prompt
            face minibuffer-prompt)
          ;; Disable non selected window highlight
          cursor-in-non-selected-windows nil
          highlight-nonselected-windows nil
          ;; PATH
          exec-path (append
                     exec-path
                     `("/usr/local/bin/"
                       ,(expand-file-name "~/.local/bin")
                       ,(expand-file-name "~/.asdf/shims")))
          inhibit-startup-message t
          fringes-outside-margins t
          select-enable-clipboard t
          ;; Backups enabled, use nil to disable
          history-length 1000
          backup-inhibited nil
          make-backup-files t
          auto-save-default t
          auto-save-list-file-name (concat temp-dir "/autosave")
          create-lockfiles nil
          backup-directory-alist
          `((".*" . ,(concat temp-dir "/backup/")))
          auto-save-file-name-transforms
          `((".*" ,(concat temp-dir "/backup/") t))
          bookmark-save-flag t
          bookmark-default-file (concat temp-dir "/bookmarks")
          read-process-output-max (* 1024 1024)
          compilation-scroll-output t
          indent-tabs-mode nil
          tab-always-indent 'complete
          scroll-conservatively 101
          indicate-empty-lines t
          indicate-buffer-boundaries 'left
          sentence-end-double-space nil
          tab-width 4
          kill-do-not-save-duplicates t
          use-dialog-box t
          global-auto-revert-non-file-buffers t
          ediff-window-setup-function 'ediff-setup-windows-plain)

  (fset 'yes-or-no-p 'y-or-n-p)
  (windmove-default-keybindings)

  ;; Better support for files with long lines
  (setopt bidi-paragraph-direction 'left-to-right)
  (setopt bidi-inhibit-bpa t)
#+end_src

*** MacOS variables customizations
#+begin_src emacs-lisp
  (when VS/IS-MACOS
    (setopt mac-command-modifier 'meta
            mac-option-modifier 'hyper))
#+end_src
*** Hooks for builtin modes
#+begin_src emacs-lisp
  (defun vs/--line-numbers ()
    "Display line numbers."
    (display-line-numbers-mode 1)
    (hl-line-mode 1))

  (defun vs/--font-lock ()
    "Font lock keywords."
    (font-lock-add-keywords
     nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq-local show-trailing-whitespace t)
              (vs/--line-numbers)
              (vs/--font-lock)))
  (add-hook 'text-mode-hook
            (lambda ()
              (setq-local show-trailing-whitespace t)
              (auto-fill-mode 1)
              (vs/--line-numbers)
              (vs/--font-lock)))
#+end_src

*** Enable some builtin modes
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (show-paren-mode 1)
  (column-number-mode 1)
  (winner-mode 1)
  (global-so-long-mode 1)
  (savehist-mode 1)
  (recentf-mode 1)
#+end_src

*** Disable some builtin modes
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

*** Prevent *scratch* to be killed
#+begin_src emacs-lisp
  (with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))
#+end_src

*** Emacs Server
#+begin_src emacs-lisp
  (require 'server)
  (when (and (fboundp 'server-running-p)
             (not (server-running-p)))
    (server-start))
#+end_src

** Dired mode
Custom variables

#+begin_src emacs-lisp
  (setopt dired-mouse-drag-files t
          mouse-drag-and-drop-region-cross-program t
          dired-listing-switches "-alh"
          delete-by-moving-to-trash t
          dired-dwim-target t
          dired-guess-shell-alist-user
          '(("\\.\\(png\\|jpe?g\\|tiff\\)" "feh" "xdg-open" "open")
            ("\\.\\(mp[34]\\|m4a\\|ogg\\|flac\\|webm\\|mkv\\)" "mpv" "xdg-open" "open")
            (".*" "xdg-open" "open")))
#+end_src

Enable dired-find-alternate-file

#+begin_src emacs-lisp
  (add-hook 'window-setup-hook
            (lambda ()
              (put 'dired-find-alternate-file 'disabled nil)))
#+end_src

Keybindings

#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (when (boundp 'dired-mode-map)
      (define-key dired-mode-map (kbd "e") 'dired-create-empty-file)
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)))
#+end_src

** Flymake
#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil
    :hook (prog-mode . flymake-mode)
    :bind (:map flymake-mode-map
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! L" . flymake-show-project-diagnostics)
                ("C-c ! l" . flymake-show-buffer-diagnostics)))
#+end_src
** Flyspell
#+begin_src emacs-lisp
  (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-;") nil))
#+end_src
** Org mode
*** Constants
Defining where the Org files will be stored.

#+begin_src emacs-lisp
  (defconst vs/org-directory
    (if (file-directory-p "~/Sync/org/") "~/Sync/org/" "~/org"))
#+end_src

Org agenda directory

#+begin_src emacs-lisp
  (defconst vs/org-agenda-directory
    (list
     (concat vs/org-directory "agenda/")))
#+end_src

Capture templates

#+begin_src emacs-lisp
  (defconst vs/org-capture-templates
    `(("t" "TODO entry" entry (file+headline "personal.org" "Tasks")
       "* TODO %?\nSCHEDULED: %^t\n%U\n%a\n")
      ("m" "Meetings menu" entry (file+headline "personal.org" "Meetings")
       "* TODO MEETING with %? :MEETING:\nSCHEDULED: %^t\n%U\n")
      ("r" "Reading list" entry (file+headline "reading_list.org" "Articles/Posts")
       "* TODO %?\n%U\n"
       :refile-targets (("reading_list.org" :maxlevel . 1)))
      ("n" "Note" entry (file org-default-notes-file)
       "* %? \n%t")
      ("c" "New Contact" entry (file "contacts.org")
       "* %(org-contacts-template-name)
  :PROPERTIES:
  :EMAIL: %(org-contacts-template-email)
  :PHONE:
  :ALIAS:
  :NICKNAME:
  :IGNORE:
  :ICON:
  :NOTE:
  :ADDRESS:
  :COMPLEMENT:
  :BIRTHDAY:
  :END:")))
#+end_src

My Org structure templates.

#+begin_src emacs-lisp
  (defconst vs/org-structure-template-alist
    '(("n" . "notes")
      ("a" . "export ascii")
      ("c" . "center")
      ("C" . "comment")
      ("e" . "example")
      ("E" . "export")
      ("h" . "export html")
      ("l" . "export latex")
      ("q" . "quote")
      ("s" . "src")
      ("sv" . "src verb :wrap src ob-verb-response")
      ("v" . "verse")))
#+end_src

*** Package declaration

Start the use-package expression

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
#+end_src

*** Customizations

Org Agenda Custom Commands

#+begin_src emacs-lisp
  :custom
  (org-agenda-custom-commands '(("c" "Complete agenda view"
                                 ((tags "PRIORITY=\"A\""
                                        ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                         (org-agenda-overriding-header "High-priority unfinished tasks:")))
                                  (agenda "")
                                  (alltodo ""
                                           ((org-agenda-skip-function
                                             '(or (vs/--org-skip-subtree-if-habit)
                                                  (vs/--org-skip-subtree-if-priority ?A)
                                                  (org-agenda-skip-if nil '(scheduled deadline))))
                                            (org-agenda-overriding-header "ALL normal priority tasks:")))))))

#+end_src

General customizations

#+begin_src emacs-lisp
  (org-directory vs/org-directory)
  (org-default-notes-file (concat org-directory "notes.org"))
  (org-agenda-files vs/org-agenda-directory)
  (org-confirm-babel-evaluate nil)
  (org-src-fontify-natively t)
  (org-log-done 'time)
  (org-babel-sh-command "bash")
  (org-capture-templates vs/org-capture-templates)
  (org-capture-bookmark nil)
  (org-structure-template-alist vs/org-structure-template-alist)
  (org-use-speed-commands t)
  (org-refile-use-outline-path t)
  (org-outline-path-complete-in-steps nil)
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (org-hide-emphasis-markers t)
  (org-imenu-depth 7)
#+end_src

*** Hooks

#+begin_src emacs-lisp
  :hook
  (org-babel-after-execute . org-display-inline-images)
  (org-mode . toggle-word-wrap)
  (org-mode . org-indent-mode)
  (org-mode . turn-on-visual-line-mode)
  (org-mode . (lambda () (display-line-numbers-mode -1)))
  (org-mode . auto-fill-mode)
#+end_src

*** Maps

Global keys related to org mode

#+begin_src emacs-lisp
  :bind
  (("C-c l" . #'org-store-link)
   ("C-c a" . #'org-agenda)
   ("C-c c" . #'org-capture))
#+end_src

*** Config

Org babel

#+begin_src emacs-lisp
  :config
  (when-idle
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (js . t)
      (shell . t)
      (plantuml . t)
      (sql . t)
      (elixir . t)
      (ruby . t)
      (dot . t)
      (latex . t)
      (verb . t)))))
#+end_src

*** Org export Latex customization
Abntex2 class

#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure nil
    :after ox-latex
    :custom
    ;; Source code highlight with Minted package.
    (org-latex-listings 'minted)
    (org-latex-packages-alist '(("" "minted")))
    (org-latex-pdf-process
     '("latexmk -shell-escape -pdf -interaction=nonstopmode -file-line-error %f")
     :config
     (add-to-list 'org-latex-classes
                  '("abntex2"
                    "\\documentclass{abntex2}
                      [NO-DEFAULT-PACKAGES]
                      [EXTRA]"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                    ("\\maketitle" . "\\imprimircapa")))))
#+end_src

#+RESULTS:

*** Extensions
**** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom (org-hide-leading-stars t))
#+end_src

**** Org Download
#+begin_src emacs-lisp
  (use-package org-download
    :hook (dired-mode . org-download-enable))
#+end_src

**** Org Present
#+begin_src emacs-lisp
  (use-package org-present
    :unless VS/IS-ANDROID
    :hook
    (org-present-mode .
                      (lambda ()
                        (org-present-big)
                        (org-display-inline-images)
                        (org-present-hide-cursor)
                        (org-present-read-only)))
    (org-present-mode-quit .
                           (lambda ()
                             (org-present-small)
                             (org-remove-inline-images)
                             (org-present-show-cursor)
                             (org-present-read-write))))
#+end_src

**** Org + Reveal.js
#+begin_src emacs-lisp
  (use-package org-re-reveal
    :unless VS/IS-ANDROID
    :custom
    (org-re-reveal-root
     "https://cdn.jsdelivr.net/reveal.js/latest")
    (org-reveal-mathjax t))
#+end_src

**** Org Verb
Make HTTP requests using org files!

#+begin_src emacs-lisp
  (use-package verb
    :after org
    :config
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src

**** Org Babel Async
Turn code evaluation async.

#+begin_src emacs-lisp
  (use-package ob-async
    :after ob)
#+end_src

**** Ox-pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :after ox)
#+end_src

**** Org Notify
#+begin_src emacs-lisp
  (use-package org-notify
    :unless VS/IS-ANDROID
    :after org
    :config
    (org-notify-start 60)

    (org-notify-add
     'default
     '(:time "10m" :period "2m" :duration 25 :actions -notify/window)
     '(:time "1h" :period "15m" :duration 25 :actions -notify/window)
     '(:time "2h" :period "30m" :duration 25 :actions -notify/window)))
#+end_src

**** Org contacts
#+begin_src emacs-lisp
  (use-package org-contacts
    :after org)
#+end_src

**** Org tempo
#+begin_src emacs-lisp
  (use-package org-tempo
    :after org
    :ensure nil)
#+end_src

**** Grip mode
Render org mode/markdown as Github README on the browser.

Requires Python package =grip=.

#+begin_src emacs-lisp
  (use-package grip-mode
    :defer t)
#+end_src

** Project
Get latest version of project.el

#+begin_src emacs-lisp
  (use-package project
    :bind (:map project-prefix-map
                ("o l" . vs/project-dir-locals)
                ("o d" . vs/project-db-file)
                ("o a" . vs/project-api-file)
                ("o r" . vs/project-runbook)
                ("S" . vs/project-save-project-buffers))
    :custom ((project-compilation-buffer-name-function
              'project-prefixed-buffer-name))
    :config
    (fset 'project-shell 'vs/vterm-in-project))
#+end_src

** Tempo mode
Built in mode to define snippets.

Snippets dir

#+begin_src emacs-lisp
  (defvar vs/snippets-dir (expand-file-name "snippets" user-emacs-directory))
#+end_src

Package declaration

#+begin_src emacs-lisp
  (use-package tempo
    :ensure nil
    :commands (tempo-forward-mark tempo-backward-mark tempo-complete-tag)
    :bind
    (("M-]" . tempo-forward-mark)
     ("M-[" . tempo-backward-mark)
     ("S-<tab>" . tempo-complete-tag)))
#+end_src

Macro to read the snippets from the =snippets-dir=.

#+begin_src emacs-lisp
  (defmacro vs/load-snippets (mode &optional ts-mode)
    "Load snippets for MODE.
  If mode has a tree-sitter mode must be provided in the TS-MODE option."
    `(with-eval-after-load (or ,ts-mode ,mode)
       (message "[%s] loading snippets..." ,mode)
       (load (format "%s/%s.el" vs/snippets-dir ,mode))
       (message "[%s] snippets loaded!" ,mode)))
#+end_src

** Third part Extensions
*** ChatGPT Shell
#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :defer t)
#+end_src
*** Diff HL
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    (magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
    (magit-post-refresh-hook . diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode))
#+end_src
*** Dump jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :after xref
    :custom ((dumb-jump-force-searcher 'rg)
             (xref-show-definitions-function #'xref-show-definitions-completing-read))
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
*** Editor config
#+begin_src emacs-lisp
  (use-package editorconfig
    :hook
    (prog-mode . editorconfig-mode))
#+end_src
*** Emacs everywhere
#+begin_src emacs-lisp
  (use-package emacs-everywhere
    :unless VS/IS-ANDROID
    :defer t
    :custom
    (emacs-everywhere-frame-parameters  '((name . "emacs-everywhere")
                                          (width . 80)
                                          (height . 12)
                                          (menu-bar-lines . 0)
                                          (tool-bar-lines . 0)
                                          (vertical-scroll-bars . nil))))
#+end_src
*** Exec Path From Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (or (daemonp) (memq window-system '(mac ns x)))
      (exec-path-from-shell-initialize)))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode))
#+end_src
*** Iedit
#+begin_src emacs-lisp
  (use-package iedit
    :bind ("C-;" . iedit-mode))
#+end_src
*** Impostman
#+begin_src emacs-lisp
  (use-package impostman
    :defer t)
#+end_src
*** Kubel
Kubernetes management from Emacs
https://github.com/abrochard/kubel/tree/master

#+begin_src emacs-lisp
  (use-package kubel
    :bind ("C-c K" . kubel))
#+end_src
*** Magit
Latest seq for transient (bug elpaca)

#+begin_src emacs-lisp
  (use-package seq)
#+end_src

Latest transient (bug elpaca)

#+begin_src emacs-lisp
  (use-package transient)
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src
*** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("M-n" . mc/mark-next-like-this)
    ("M-p" . mc/mark-previous-like-this)
    ("C-c x" . mc/mark-all-like-this))
#+end_src
*** Nerd Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Iosevka Nerd Font"))
#+end_src
*** Password store
#+begin_src emacs-lisp
  (use-package password-store
    :defer t)
#+end_src
*** PDF tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode  ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-loader-install))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents  . 5)
                       (projects . 5)
                       (bookmarks . 5)
                       (agenda . 5)))
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    (dashboard-display-icons-p t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :config
    (dashboard-setup-startup-hook))
#+end_src
*** Reformatter
Provides a macro that helps to standardize the way Emacs use CLI
formatters, dealing with things such as:

- Missing programs
- Buffers not yet saved to a file
- Displaying error output
- Colorising ANSI escape sequences in any error output
- Handling file encodings correctly

  #+begin_src emacs-lisp
    (use-package reformatter)
  #+end_src
*** Ripgrep
#+begin_src emacs-lisp
  (use-package rg
    :bind ("C-c r" . rg-menu)
    :custom (rg-command-line-flags '("--hidden")))
#+end_src
*** Rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src
*** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    :bind
    (:map smartparens-mode-map
          ("C-)" . sp-forward-slurp-sexp)
          ("C-(" . sp-forward-barf-sexp)
          ("C-{" . sp-backward-slurp-sexp)
          ("C-}" . sp-backward-barf-sexp))
    :hook   (prog-mode . smartparens-mode))
#+end_src
*** Switch Window
#+begin_src emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window))
#+end_src
*** View Large Files
#+begin_src emacs-lisp
  (use-package vlf
    :config
    (require 'vlf-setup))
#+end_src
*** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :bind ("<f7>" . vterm-other-window)
    :custom (vterm-max-scrollback 5000))
#+end_src
*** Telega
#+begin_src emacs-lisp
  (use-package telega
    :unless VS/IS-ANDROID
    :bind ("C-c t" . telega))
#+end_src
*** Treesit Auto
Tree sitter auto installer for Emacs 29

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (global-treesit-auto-mode))
#+end_src
*** Wich Key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
*** XClip
#+begin_src emacs-lisp
  (use-package xclip
    :if (and (eq system-type 'gnu/linux) (string= (getenv "XDG_SESSION_TYPE") "x11"))
    :hook (after-init . xclip-mode))
#+end_src
** Appearence
*** Fonts Families
Uses fontaine to configure the fonts preset

#+begin_src emacs-lisp
  (use-package fontaine
    :custom
    (fontaine-presets
     `((small
        :default-family "Iosevka Nerd Font"
        :default-height ,(if VS/IS-MACOS 150 100)
        :variable-pitch-family "Noto Sans")
       (regular) ; like this it uses all the fallback values and is named `regular'
       (medium
        :default-weight semilight
        :default-height ,(if VS/IS-MACOS 190 150)
        :bold-weight extrabold)
       (large
        :inherit medium
        :default-height ,(if VS/IS-MACOS 210 170))
       (presentation
        :inherit medium
        :default-weight light
        :default-height 180)
       (t
        :default-family "Iosevka Nerd Font"
        :default-weight regular
        :default-height ,(if VS/IS-MACOS 170 120)
        :fixed-pitch-family nil ; falls back to :default-family
        :fixed-pitch-weight nil ; falls back to :default-weight
        :fixed-pitch-height 1.0
        :fixed-pitch-serif-family nil ; falls back to :default-family
        :fixed-pitch-serif-weight nil ; falls back to :default-weight
        :fixed-pitch-serif-height 1.0
        :variable-pitch-family "Noto Sans"
        :variable-pitch-weight nil
        :variable-pitch-height 1.0
        :bold-family nil ; use whatever the underlying face has
        :bold-weight bold
        :italic-family nil
        :italic-slant italic
        :line-spacing nil
        :symbol-family ,(if VS/IS-MACOS "Apple Color Emoji" "Noto Color Emoji"))))
    :init
    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    :hook
    (kill-emacs . fontaine-store-latest-preset)
    (modus-themes-after-load-theme . fontaine-apply-current-preset)
    :bind (("C-c f" . fontaine-set-preset)
           ("C-c F" . fontaine-set-face-font)
           :map ctl-x-x-map
           ("v" . variable-pitch-mode)))
#+end_src

Helps in font resize.

#+begin_src emacs-lisp
  (setopt text-scale-remap-header-line t)
#+end_src

*** Theme
#+begin_src emacs-lisp
  (defun vs/--setup-theme ()
    "Configure theme."
    (load-theme 'modus-vivendi t))
#+end_src

Theme customization

#+begin_src emacs-lisp
  (setopt modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-mixed-fonts t)
#+end_src

Load theme after create a new frame

#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook 'vs/--setup-theme)
    (vs/--setup-theme))
#+end_src

*** Modeline
See more: https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line

Disabling my custom modeline for now.

#+begin_src emacs-lisp :tangle no
   (use-package vs-modeline-mode
    :ensure nil
    :defer t
    :after nerd-icons
    :init
    (vs-modeline-mode))
#+end_src

Experimenting nano-modeline for a while.

#+begin_src emacs-lisp
  (use-package nano-modeline
    :init
    (nano-modeline-prog-mode t)
    :custom
    (nano-modeline-position 'nano-modeline-footer)
    :hook
    (prog-mode           . nano-modeline-prog-mode)
    (text-mode           . nano-modeline-text-mode)
    (org-mode            . nano-modeline-org-mode)
    (pdf-view-mode       . nano-modeline-pdf-mode)
    (mu4e-headers-mode   . nano-modeline-mu4e-headers-mode)
    (mu4e-view-mode      . nano-modeline-mu4e-message-mode)
    (elfeed-show-mode    . nano-modeline-elfeed-entry-mode)
    (elfeed-search-mode  . nano-modeline-elfeed-search-mode)
    (term-mode           . nano-modeline-term-mode)
    (xwidget-webkit-mode . nano-modeline-xwidget-mode)
    (messages-buffer-mode . nano-modeline-message-mode)
    (org-capture-mode    . nano-modeline-org-capture-mode)
    (org-agenda-mode     . nano-modeline-org-agenda-mode))
#+end_src

*** Display buffer rules
#+begin_src emacs-lisp
  (setopt display-buffer-alist
          '(("\\(\\*.*vterm\\.*\\*?\\|\\*?e?shell\\*\\)"
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . -1)
             (dedicated . t))
            ((or (derived-mode . compilation-mode)
                 (derived-mode . comint-mode))
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . 0)
             (dedicated . t))
            ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Help\\)\\*"
             (display-buffer-in-side-window)
             (window-height . 0.30)
             (side . bottom)
             (slot . 1)
             (dedicated . t))))
#+end_src

*** Tab bar mode
#+begin_src emacs-lisp
  (setopt
   tab-bar-tab-name-function
   (lambda ()
     (if-let ((project (project-current))
              (project-name (project-name project)))
         project-name
       (tab-bar-tab-name-current)))
   tab-bar-mode t
   tab-bar-new-tab-choice "*scratch*"
   tab-bar-close-button-show nil
   tab-bar-new-button-show nil)

  (global-set-key (kbd "H-t") 'tab-bar-select-tab-by-name)
#+end_src

** Completion system
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure (vertico
             :files (:defaults "extensions/*")
             :includes (vertico-directory))
    :custom
    (vertico-cycle t)
    (enable-recursive-minibuffers t)
    :init
    (vertico-mode 1)
    :bind
    (:map vertico-map
          ("M-h" . vertico-directory-up))
    :hook
    (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-category-defaults nil))
#+end_src

*** Embark - minibuffer actions
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("M-o" . embark-act)
     ("C-h B" . embark-bindings))
    :custom
    (prefix-help-command 'embark-prefix-help-command)
    (embark-action-indicator
     (lambda (map _target)
       (which-key--show-keymap "Embark" map nil nil 'no-paging)
       'which-key--hide-popup-ignore-command))
    (embark-become-indicator 'embark-action-indicator))
#+end_src

Hide the mode line of the Embark live/completions buffers

#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src

*** Marginalia - minibuffer annotations
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode 1)
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle)
                ("M-A" . marginalia-cycle)))
#+end_src

*** Consult - commands based on completing-read
#+begin_src emacs-lisp
  (use-package consult
    :bind
    (("C-c h" . consult-history)
     ("C-c m" . consult-mode-command)
     ("C-c b" . consult-bookmark)
     ("C-c k" . consult-kmacro)

     ("C-x M-:" . consult-complex-command)
     ("C-x b". consult-buffer)
     ("C-x 4 b". consult-buffer-other-window)
     ("C-x 5 b". consult-buffer-other-frame)
#+end_src

Custom =M-#= bindings for fast register access

#+begin_src emacs-lisp
  ("M-#" . consult-register-load)
  ("M-'" . consult-register-store)
  ("C-M-#" . consult-register)
  ("C-M-#" . consult-register)
#+end_src

Other custom bindings

#+begin_src emacs-lisp
  ("M-y" . consult-yank-pop)
#+end_src

M-g bindings (goto-map)

#+begin_src emacs-lisp
  ("M-g e" . consult-compile-error)
  ("M-g g" . consult-goto-line)
  ("M-g M-g" . consult-goto-line)
  ("M-g o" . consult-outline)
  ("M-g m" . consult-mark)
  ("M-g k" . consult-global-mark)
  ("M-g i" . consult-imenu)
  ("M-g I" . consult-imenu-multi)
  ("M-g !" . consult-flymake)
#+end_src

M-s bindings (search-map)

#+begin_src emacs-lisp
  ("M-s f" . consult-find)
  ("M-s L" . consult-locate)
  ("M-s g" . consult-grep)
  ("M-s G" . consult-git-grep)
  ("M-s r" . consult-ripgrep)
  ("M-s l" . consult-line)
  ("M-s k" . consult-keep-lines)
  ("M-s u" . consult-focus-lines)
#+end_src

Isearch integration

#+begin_src emacs-lisp
  ("M-s e" . consult-isearch-history)
  :map isearch-mode-map
  ("M-e" . consult-isearch-history)
  ("M-s e" . consult-isearch-history)
  ("M-s l" . consult-line))
#+end_src

Consult narrow key

#+begin_src emacs-lisp
  :custom
  (consult-narrow-key "<"))
#+end_src

Consult and emabark

#+begin_src emacs-lisp
  (use-package embark-consult
    :after consult)
#+end_src

Consult dir

#+begin_src emacs-lisp
  (use-package consult-dir
    :bind
    ("C-x C-d" . consult-dir)
    :after consult)
#+end_src

Consult and vertico

#+begin_src emacs-lisp
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setopt completion-in-region-function
          (lambda (&rest args)
            (apply (if (bound-and-true-p vertico-mode)
                       'consult-completion-in-region
                     'completion--in-region)
                   args)))
#+end_src

Consult and Eglot integration

#+begin_src emacs-lisp
  (use-package consult-eglot
    :after (consult eglot))
#+end_src

** Global keybindings

New global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-c i") 'vs/indent-buffer)
  (global-set-key (kbd "H-=") 'maximize-window)
  (global-set-key (kbd "H--") 'minimize-window)
  (global-set-key (kbd "H-0") 'balance-windows)
  (global-set-key (kbd "C-x 2") 'vs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'vs/split-window-right-and-switch)
  (global-set-key (kbd "M-S-<up>") 'vs/move-line-up)
  (global-set-key (kbd "M-S-<down>") 'vs/move-line-down)
  (global-set-key (kbd "M-D") 'vs/duplicate-current-line)
  (global-set-key (kbd "H-d") 'vs/duplicate-current-line)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-c s b") 'vs/scratch-buffer)
  (global-set-key (kbd "<f8>") 'window-toggle-side-windows)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "H-<tab>") 'tab-next)
  (global-set-key (kbd "H-S-<tab>") 'tab-previous)
  (global-set-key (kbd "M-W") 'vs/kill-ring-unfilled)
  (global-set-key (kbd "C-x p K") 'vs/close-project-tab)
  (global-set-key (kbd "H-g o") 'vs/grep-org-files)
#+end_src

Removing some default keybindings

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

** Keybindings for specific modes
*** NXML mode
#+begin_src emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :bind (:map nxml-mode-map
                ("C-c C-f" . vs/format-xml-buffer)
                ("C-c C-w" . vs/nxml-where)))

#+end_src

** Language server protocol (LSP)
Using Eglot since is the default LSP in Emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :bind
    (:map eglot-mode-map
          ("C-c e a" . eglot-code-actions)
          ("C-c e f" . eglot-format)
          ("C-c e r" . eglot-rename)
          ("C-c e R" . eglot-reconnect)
          ("C-c e o" . eglot-code-action-organize-imports)
          ("C-c e D" . eglot-find-declaration)
          ("C-c e i" . eglot-find-implementation)
          ("C-c e d" . eglot-find-typeDefinition)
          ("C-c e h" . eldoc))
    :custom
    (eglot-autoshutdown t)
    ;; disable events buffer
    (eglot-events-buffer-size 0)
    :config
    (fset #'jsonrpc--log-event #'ignore))
#+end_src

** Docker
Packages

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t)

  (use-package docker-compose-mode
    :defer t)

  (use-package docker
    :unless VS/IS-ANDROID
    :bind ("C-c d" . docker))
#+end_src

** Programming languages
Flyspell for comments and strings.

#+begin_src emacs-lisp
  (when-idle
   (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+end_src

Subword mode for programming modes

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+end_src

*** Clojure
Clojure mode

#+begin_src emacs-lisp
  (use-package clojure-mode
    :defer t)
#+end_src

Cider

#+begin_src emacs-lisp
  (use-package cider
    :after clojure)
#+end_src

Flymake Kondor

#+begin_src emacs-lisp
  (use-package flymake-kondor
    :hook (clojure-mode . flymake-kondor-setup))
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local clojure-lsp-link
      (concat "https://github.com/clojure-lsp/clojure-lsp/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "clojure-lsp-native-macos-amd64.zip")
               (t "clojure-lsp-native-static-linux-amd64.zip"))))

  (defvar-local clojure-lsp-command
      (cond
       ((eq system-type 'darwin)
        '("clojure-lsp-native-macos-amd64/clojure-lsp"))
       (t '("clojure-lsp-native-static-linux-amd64/clojure-lsp"))))

  (vs/add-auto-lsp-server 'clojure-mode
                          :download-url clojure-lsp-link
                          :command clojure-lsp-command)
#+end_src
*** C#
LSP

#+begin_src emacs-lisp
  (defcustom vs/omnisharp-solution-file nil
    "Set the solution file for omnisharp LSP server."
    :group 'csharp
    :type 'string
    :safe t)

  (defvar-local omnisharp-link
      (concat "https://github.com/omnisharp/omnisharp-roslyn/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "omnisharp-osx.tar.gz")
               (t "omnisharp-linux-x64.tar.gz"))))

  (defvar-local omnisharp-command (append
                                   (list "run" "-lsp")
                                   (when vs/omnisharp-solution-file
                                     (list "-s" vs/omnisharp-solution-file))))

  (vs/add-auto-lsp-server
   'csharp-ts-mode
   :download-url omnisharp-link
   :command-fn (lambda (_interactive)
                 (append
                  (vs/--wrap-lsp-context mode "run")
                  (list "-lsp")
                  (when vs/omnisharp-solution-file
                    (list
                     "-s"
                     (expand-file-name vs/omnisharp-solution-file))))))
#+end_src
*** Crystal
Crystal mode

#+begin_src emacs-lisp
  (use-package crystal-mode
    :defer t)
#+end_src

*** Elixir
Elixir TS Mode

#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    :defer t
    :bind (:map elixir-ts-mode-map
                ("C-c C-c f" . elixir-format-buffer)
                ("C-c C-c M" . vs/elixir-map-string-to-map-atom)
                ("C-c C-c m" . vs/elixir-map-atom-to-map-string)
                ("C-c C-c J" . vs/etf-to-json)
                ("C-c C-c j" . vs/json-to-etf)
                ("C-c C-c D" . vs/elixir-open-dep-docs)
                ("C-c C-c z" . run-elixir-project))
#+end_src

Elixir reformatter definition

#+begin_src emacs-lisp
  :config
  (reformatter-define elixir-format
    :program "mix"
    :args '("format" "-"))

  (defun vs/--set-default-directory-to-mix-project-root (original-fun &rest args)
    (if-let* ((mix-project-root (and buffer-file-name
                                     (locate-dominating-file buffer-file-name
                                                             ".formatter.exs"))))
        (let ((default-directory mix-project-root))
          (apply original-fun args))
      (apply original-fun args)))

  (advice-add 'elixir-format-region :around #'vs/--set-default-directory-to-mix-project-root)
  (advice-add 'elixir-format-buffer :around #'vs/--set-default-directory-to-mix-project-root)

  ;; add major mode remap alist
  (add-to-list 'major-mode-remap-alist
               '(elixir-mode . elixir-ts-mode)))
#+end_src

Ex Unit

#+begin_src emacs-lisp
  (use-package exunit
    :hook
    (elixir-ts-mode . exunit-mode)
    (elixir-mode . exunit-mode))
#+end_src

Inf Elixir

#+begin_src emacs-lisp
  (use-package inf-elixir
    :defer t
    :ensure
    (inf-elixir :type git :host github :repo "vinikira/inf-elixir.el" :branch "main"))
#+end_src

Org Babel Elixir

#+begin_src emacs-lisp
  (use-package ob-elixir
    :ensure
     (ob-elixir :type git :host github :repo "vinikira/ob-elixir" :branch "master")
    :after ob)
#+end_src

Compile Credo

#+begin_src emacs-lisp
  (use-package compile-credo
    :ensure
    (compile-credo :type git :host github :repo "vinikira/compile-credo" :branch "main")
    :after (:any elixir-mode elixir-ts-mode))
#+end_src

LSP

#+begin_src emacs-lisp
  (vs/add-auto-lsp-server
   'elixir-ts-mode
   :download-url "https://github.com/elixir-lsp/elixir-ls/releases/latest/download/elixir-ls.zip"
   :command '("elixir-ls/language_server.sh"))
#+end_src

#+RESULTS:

Flymake credo

#+begin_src emacs-lisp
  (use-package flymake-credo
    :hook
    (elixir-ts-mode . flymake-credo-load)
    (elixir-mode . flymake-credo-load)
    :ensure
    (flymake-credo :type git :host github :repo "vinikira/flymake-credo" :branch "main"))
#+end_src

Mix.el

#+begin_src emacs-lisp
  (use-package mix
    :hook
    (elixir-ts-mode . mix-minor-mode)
    (elixir-mode . mix-minor-mode))

#+end_src

Snippets

#+begin_src emacs-lisp
  (defvar elixir-tempo-tags nil
    "Tempo tags for Elixir mode")

  (add-hook 'elixir-ts-mode-hook
            (lambda ()
              (tempo-use-tag-list 'elixir-tempo-tags)))
#+end_src

Loading snippets

#+begin_src emacs-lisp
  (vs/load-snippets 'elixir-mode 'elixir-ts-mode)
#+end_src

*** Elm
Elm mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :defer t)
#+end_src
*** Erlang
Erlang Mode

#+begin_src emacs-lisp
  (defun vs/load-erlang-mode ()
    "Detect if erlang is installed and load elisp files from erlang directory."
    (interactive)
    (let* ((erlang-lib-dir
            (concat
             (string-trim (shell-command-to-string "asdf where erlang"))
             "/lib"))
           (tools-dir
            (seq-find (lambda (dir-name)
                        (string-match "^tools.?+" dir-name))
                      (directory-files erlang-lib-dir)))
           (erlang-emacs-dir (concat erlang-lib-dir "/" tools-dir "/emacs")))
      (if (file-directory-p erlang-emacs-dir)
          (progn
            (add-to-list 'load-path erlang-emacs-dir)
            (require 'erlang)
            (message "Erlang mode loaded!"))
        (warn "Erlang isn't installed..."))))
#+end_src

*** Dart
Dart mode

#+begin_src emacs-lisp
  (use-package dart-mode
    :defer t
    :custom (dart-format-on-save t)
    :config
    (vs/add-auto-lsp-server
     'dart-mode
     :command-fn (lambda () (list "dart" "language-server"))))
#+end_src
*** Go
Go TS mode

#+begin_src emacs-lisp
  (use-package go-ts-mode
    :ensure nil
    :defer t
    :config
    (add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode)))
#+end_src

*** Groovy
Groovy mode

#+begin_src emacs-lisp
  (use-package groovy-mode
    :defer t)
#+end_src
*** Haskell
Haskell Mode

#+begin_src emacs-lisp
  (use-package haskell-mode
    :custom (haskell-font-lock-symbols t)
    :hook
    (haskell-mode . haskell-indentation-mode)
    (haskell-mode . interactive-haskell-mode))
#+end_src

*** Java
Configures Java Mode

#+begin_src emacs-lisp
  (use-package java-ts-mode
    :ensure nil
    :defer t
    :hook (java-ts-mode . (lambda ()
                            (require 'cc-mode)
                            (c-set-style "cc-mode")
                            (make-local-variable 'tab-width)
                            (make-local-variable 'indent-tabs-mode)
                            (make-local-variable 'c-basic-offset)
                            (setopt tab-width 4
                                    indent-tabs-mode t
                                    c-basic-offset 4))))
#+end_src
*** JavaScript
Snippets variable list

#+begin_src emacs-lisp
  (defvar javascript-tempo-tags nil
    "Tempo tags for JS/TS mode.")
#+end_src

JS TS Mode

#+begin_src emacs-lisp
  (use-package js-ts-mode
    :ensure nil
    :defer t
    :config
    (tempo-use-tag-list 'javascript-tempo-tags))
#+end_src

JS Mode

#+begin_src emacs-lisp
  (use-package js-mode
    :ensure nil
    :defer t
    :hook (javascript-mode . js-jsx-enable)
    :custom
    (js-indent-level 2)
    :config
    (tempo-use-tag-list 'javascript-tempo-tags)
    (fset 'js-find-symbol 'xref-find-definitions))
#+end_src

Jest

#+begin_src emacs-lisp
  (use-package jest-test-mode
    :hook
    ((js-ts-modejs-mode js-jsx-mode typescript-mode typescript-tsx-mode typescript-ts-mode)
     . jest-test-mode))
#+end_src

ESLint compilation mode

#+begin_src emacs-lisp :tangle no
  (use-package compile-eslint
    :ensure (compile-eslint :type git :host github :repo "Fuco1/compile-eslint" :branch "master")
    :after (:any js-mode js-ts-mode)
    :config
    (require 'compile-eslint)
    (when (boundp 'compilation-error-regexp-alist)
      (push 'eslint compilation-error-regexp-alist)))
#+end_src

Flymake ESLint

#+begin_src emacs-lisp
  (use-package flymake-eslint
    :hook ((js-mode js-ts-mode) . flymake-eslint-enable))
#+end_src

LSP

#+begin_src emacs-lisp
  (cl-loop for mode in '(typescript-mode js-mode js-ts-mode typescript-ts-mode)
           do
           (vs/add-auto-lsp-server
            mode
            :download-fn (lambda (_reinstall)
                           (async-shell-command
                            "npm install -g typescript-language-server typescript"
                            (get-buffer-create "*Install js/ts LSP*")))))
#+end_src

Loading snippets

#+begin_src emacs-lisp
  (vs/load-snippets 'js-mode)
  (vs/load-snippets 'js-ts-mode)
  (vs/load-snippets 'typescript-mode)
  (vs/load-snippets 'typescript-ts-tsmode)
#+end_src

*** Kotlin
Kotlin Mode

#+begin_src emacs-lisp
  (use-package kotlin-mode
    :defer t)
#+end_src
*** Lisp
Slime

#+begin_src emacs-lisp :tangle no
  (use-package slime
    :mode ("\\.cl$|\\.lisp$" . slime-mode)
    :custom
    (inferior-lisp-program "sbcl")
    (slime1-contribs '(slime-fancy))
    (slime-net-coding-system 'utf-8-unix))
#+end_src
*** Python
Customize python mode

Python TS mode

#+begin_src emacs-lisp
  (use-package python-ts-mode
    :defer t
    :ensure nil
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt"))
#+end_src

*** Ruby
#+begin_src emacs-lisp
  (use-package ruby-ts-mode
    :ensure nil
    :bind (:map ruby-ts-mode-map
                ("C-c C-c f" . ruby-format-buffer)
                ("C-c C-c z" . run-ruby))
#+end_src

Ruby reformatter definition

#+begin_src emacs-lisp
  :config
  (reformatter-define ruby-format
    :program "rubocop"
    :args '("-a" "--stderr" "-s" "--")
    :exit-code-success-p (lambda (_c) t))
  (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode)))
#+end_src

Flymake Ruby

#+begin_src emacs-lisp
  (use-package flymake-ruby
    :hook ((ruby-ts-mode ruby-mode) . flymake-ruby-load))
#+end_src

RSpec mode

#+begin_src emacs-lisp
  (use-package rspec-mode
    :defer t)
#+end_src

Inf-ruby

#+begin_src emacs-lisp
  (use-package inf-ruby
    :hook
    (ruby-modek . inf-ruby-minor-mode)
    (ruby-mode . inf-ruby-switch-setup))
#+end_src

LSP

#+begin_src emacs-lisp
  (vs/add-auto-lsp-server
   'ruby-ts-mode
   :download-fn (lambda (_reinstall)
                  (async-shell-command
                   "gem install solargraph"
                   (get-buffer-create "*Install Ruby LSP*"))))
#+end_src
*** Rust
Rustic

#+begin_src emacs-lisp
  (use-package rustic
    :defer t
    :custom (rustic-lsp-client 'eglot))
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local rust-analyzer-link
      (concat "https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/"
              (cond
               ((eq system-type 'darwin) "rust-analyzer-x86_64-apple-darwin.gz")
               (t "rust-analyzer-x86_64-unknown-linux-musl.gz"))))

  (defvar-local rust-analyzer-command
      (list (cond
             ((eq system-type 'darwin)
              "rust-analyzer-x86_64-apple-darwin")
             (t "rust-analyzer-x86_64-unknown-linux-musl"))))

  (vs/add-auto-lsp-server 'rustic-mode
                          :download-url rust-analyzer-link
                          :command rust-analyzer-command)
#+end_src
*** Web
Web Mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    ("\\.html?\\'" . web-mode)
    ("\\.njk?\\'" . web-mode)
    ("\\.phtml?\\'" . web-mode)
    ("\\.tpl\\.php\\'" . web-mode)
    ("\\.[agj]sp\\'" . web-mode)
    ("\\.as[cp]x\\'" . web-mode)
    ("\\.erb\\'" . web-mode)
    ("\\.mustache\\'" . web-mode)
    ("\\.djhtml\\'" . web-mode)
    ("\\.mjml\\'" . web-mode)
    ("\\.eex\\'" . web-mode)
    ("\\.leex\\'" . web-mode)
    ("\\.heex\\'" . web-mode)
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (css-indent-offset 2)
    (web-mode-enable-current-element-highlight t)
    :bind (:map web-mode-map
                ("C-c o b" . browse-url-of-file)))

#+end_src

Emmet Mode

#+begin_src emacs-lisp
  (use-package emmet-mode
    :custom
    (emmet-move-cursor-between-quotes t)
    :hook
    ((web-mode vue-mode js-mode js-ts-mode heex-ts-mode elixir-ts-mode)
     . emmet-mode))
#+end_src

Vue Mode
#+begin_src emacs-lisp
  (use-package vue-mode
    :defer t)
#+end_src
*** SQL
SQL Format

#+begin_src emacs-lisp
  (use-package sqlformat
    :custom
    (sqlformat-command 'pgformatter)
    (sqlformat-args '("-s2" "-g"))
    :bind (:map sql-mode-map
                ("C-c C-f" . sqlformat)))
#+end_src

*** Zig
Zig mode

#+begin_src emacs-lisp
  (use-package zig-mode
    :defer t)
#+end_src

LSP

#+begin_src emacs-lisp
  (defvar-local zls-link
    (concat "https://github.com/zigtools/zls/releases/latest/download/"
            (cond
             ((eq system-type 'darwin) "x86_64-macos.tar.xz")
             (t "x86_64-linux.tar.xz"))))

  (defvar-local zls-command
    (list (cond
           ((eq system-type 'darwin)
            "bin/zls")
           (t "bin/zls"))))

  (vs/add-auto-lsp-server 'zig-mode :download-url zls-link :command zls-command)
#+end_src

** Files formats
*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

*** CVS
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t
    :hook (csv-mode . csv-align-mode))
#+end_src

*** GraphQL
#+begin_src emacs-lisp
  (use-package graphql-mode
    :defer t)
#+end_src

*** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :defer t
    :custom
    (graphviz-dot-indent-width 4))
#+end_src

*** HashiCorp Configuration Language
#+begin_src emacs-lisp
  (use-package hcl-mode
    :defer t)
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md$" . gfm-mode)
    :custom (markdown-command "pandoc --quiet -f gfm -s")
    :bind (:map markdown-mode-map
                ("C-c C-f" . markdownfmt-format-buffer)))

  (use-package markdownfmt
    :hook
    ((gfm-mode markdown-mode) 'markdownfmt-enable-on-save))
#+end_src

*** Mermaid Mode
#+begin_src emacs-lisp
  (use-package mermaid-mode
    :defer t)
#+end_src

*** Nginx
#+begin_src emacs-lisp
  (use-package nginx-mode
    :defer t)
#+end_src

*** Plantuml Mode
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :defer t
    :custom
    (plantuml-output-type "svg")
    (plantuml-default-exec-mode 'jar)
    :config
    (let* ((plantuml-directory (if (boundp 'private-dir) private-dir "/tmp"))
           (plantuml-target (concat plantuml-directory "/plantuml.jar")))
      (setopt org-plantuml-jar-path plantuml-target
              plantuml-jar-path plantuml-target)))
#+end_src

Creating a tag table for =plantuml-mode=.

#+begin_src emacs-lisp
  (defvar plantuml-tempo-tags nil
    "Tempo tags for Plantuml mode")

  (add-hook 'plantuml-mode-hook
            (lambda ()
              (tempo-use-tag-list 'plantuml-tempo-tags)))
#+end_src

Loading snippets

#+begin_src emacs-lisp
  (vs/load-snippets 'plantuml-mode)
#+end_src

*** Protobuf mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :defer t)
#+end_src

*** TOML Mode
#+begin_src emacs-lisp
  (use-package toml-mode
    :defer t)
#+end_src

** Writer
*** LaTeX
#+begin_src emacs-lisp :tangle no
  (use-package auctex
    :defer t
    :hook (tex-mode . flyspell-mode))

  (use-package auctex-latexmk
    :defer auctex
    :custom (auctex-latexmk-inherit-TeX-PDF-mode t)
    :hook (auctex-mode-hook . auctex-latexmk-setup))
#+end_src

*** Epub mode
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub$" . nov-mode))
#+end_src

*** Dark Room mode
#+begin_src emacs-lisp
  (use-package darkroom
    :bind ("<f6>" . darkroom-tentative-mode))
#+end_src

*** Langtool

#+begin_src emacs-lisp
  (use-package langtool
    :custom
    (langtool-default-language "en-US")
    (langtool-mother-tongue "pt-BR")
    :bind
    ("C-x w c" . langtool-check)
    ("C-x w d" . langtool-check-done)
    ("C-x w l" . langtool-switch-default-language)
    ("C-x w s" . langtool-show-message-at-point)
    ("C-x w b" . langtool-correct-buffer)
    :config
    (let* ((langtool-directory (if (boundp 'private-dir) private-dir "/tmp"))
           (langtool-link
            "https://languagetool.org/download/LanguageTool-stable.zip")
           (langtool-zip (concat langtool-directory "/langtool.zip"))
           (langtool-folder (concat langtool-directory "/langtool/")))
      (if (not (file-exists-p langtool-folder))
          (progn (message "Downloading langtool.zip")
                 (async-shell-command
                  (format "wget %s -O %s && unzip %s -d %s && rm %s"
                          langtool-link
                          langtool-zip
                          langtool-zip
                          langtool-folder
                          langtool-zip))))
      (autoload 'find-lisp-find-files "find-lisp.el")
      (setopt langtool-language-tool-jar
              (car (find-lisp-find-files
                    langtool-folder "languagetool-commandline.jar")))))
#+end_src

** Mail
*** Notmuch mail client
#+begin_src emacs-lisp
  (use-package notmuch
    :unless VS/IS-ANDROID
    :ensure nil
    :commands (notmuch)
    :custom
    'notmuch-saved-searches
    '((:name "Unread"
             :query "tag:inbox and tag:unread"
             :count-query "tag:inbox and tag:unread"
             :key "u"
             :sort-order newest-first)
      (:name "Inbox"
             :query "tag:inbox"
             :count-query "tag:inbox"
             :key "i"
             :sort-order newest-first)
      (:name "Archive"
             :query "tag:archive"
             :count-query "tag:archive"
             :key "a"
             :sort-order newest-first)
      (:name "Sent"
             :query "tag:sent or tag:replied"
             :count-query "tag:sent or tag:replied"
             :key "s"
             :sort-order newest-first)
      (:name "Trash"
             :query "tag:deleted"
             :count-query "tag:deleted"
             :key "t"
             :sort-order newest-first)))
#+end_src

*** SMTP
Remember to set the `user-full-name' and `user-mail-address' in custom
file.

#+begin_src emacs-lisp
  (setopt mail-user-agent 'message-user-agent
          mail-specify-envelope-from t
          sendmail-program "msmtp"
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-sendmail-envelope-from 'header
          message-send-mail-function 'message-send-mail-with-sendmail
          message-kill-buffer-on-exit t)
#+end_src

** End of file
End of file

#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src
